// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/http;

# Profile data with restricted visibility. These fields are visible only to members of the
# same organization. The values here (full name, for example) may differ from the values
# at the top level of the response.
public type Member_nonPublic record {
    string fullName?;
    string initials?;
    # A URL that references the non-public avatar for the member
    string avatarUrl?;
    string avatarHash?;
};

public type MemberPrefs_timezoneInfo record {
    int offsetCurrent?;
    string timezoneCurrent?;
    int offsetNext?;
    string dateNext?;
    string timezoneNext?;
};

# Represents the Queries record for the operation: put-members-id-boardbackgrounds-idbackground
public type PutMembersIdBoardbackgroundsIdbackgroundQueries record {
    # One of: `dark`, `light`, `unknown`
    "dark"|"light"|"unknown" brightness?;
    # Whether the background should be tiled
    boolean tile?;
};

# Represents the Queries record for the operation: cardsidmembersvoted-1
public type Cardsidmembersvoted1Queries record {
    # The ID of the member to vote 'yes' on the card
    TrelloID value;
};

public type EnterpriseAuditLog_member record {
    TrelloID id?;
    string username?;
    string fullName?;
};

# Represents the Queries record for the operation: put-lists-id-field
public type PutListsIdFieldQueries record {
    # The new value for the field
    value_1 value?;
};

# Represents the Queries record for the operation: get-members-id-tokens
public type GetMembersIdTokensQueries record {
    # Whether to include webhooks
    boolean webhooks = false;
};

public type Prefs record {
    "org"|"board" permissionLevel?;
    boolean hideVotes?;
    "disabled"|"enabled" voting?;
    string comments?;
    "admins"|"members" invitations?;
    boolean selfJoin?;
    boolean cardCovers?;
    boolean isTemplate?;
    CardAging cardAging?;
    boolean calendarFeedEnabled?;
    TrelloID background?;
    string backgroundImage?;
    ImageDescriptor[] backgroundImageScaled?;
    boolean backgroundTile?;
    string backgroundBrightness?;
    string backgroundBottomColor?;
    string backgroundTopColor?;
    boolean canBePublic?;
    boolean canBeEnterprise?;
    boolean canBeOrg?;
    boolean canBePrivate?;
    boolean canInvite?;
};

# Represents the Queries record for the operation: put-actions-id-text
public type PutActionsIdTextQueries record {
    # The new text for the comment
    string value;
};

# Represents the Queries record for the operation: get-board-id-plugins
public type GetBoardIdPluginsQueries record {
    # One of: `enabled` or `available`
    "enabled"|"available" filter = "enabled";
};

# Represents the Queries record for the operation: put-boards-id-members
public type PutBoardsIdMembersQueries record {
    # Valid values: admin, normal, observer. Determines what type of member the user being added should be of the board.
    "admin"|"normal"|"observer" 'type = "normal";
    # The email address of a user to add as a member of the board.
    string email;
};

public type cover record {
    cardsid_value value?;
};

public type EnterpriseAuditLog_memberCreator record {
    TrelloID id?;
    string username?;
    string fullName?;
};

# Represents the Queries record for the operation: post-members-id-savedsearches
public type PostMembersIdSavedsearchesQueries record {
    # The position of the saved search. `top`, `bottom`, or a positive float.
    posStringOrNumber pos;
    # The search query
    string query;
    # The name for the saved search
    string name;
};

public type Action_data_board record {
    TrelloID id?;
    string name?;
    string shortLink?;
};

# Represents the Queries record for the operation: get-cards-id-members
public type GetCardsIdMembersQueries record {
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "avatarHash,fullName,initials,username";
};

public type Action_limits_reactions record {
    Action_limits_reactions_perAction perAction?;
    Action_limits_reactions_perAction uniquePerAction?;
};

public type idCard_customFields_body record {
    # An array of objects containing the custom field ID, key and value, and ID of list type option.
    cardsidCardcustomFields_customFieldItems[] customFieldItems?;
};

# Represents the Queries record for the operation: get-checklists-id-checkitems-idcheckitem
public type GetChecklistsIdCheckitemsIdcheckitemQueries record {
    # One of: `all`, `name`, `nameData`, `pos`, `state`, `type`, `due`, `dueReminder`, `idMember`,.
    "all"|"name"|"nameData"|"pos"|"state"|"type"|"due"|"dueReminder"|"idMember" fields = "name, nameData, pos, state, due, dueReminder, idMember";
};

public type cardsidCardcustomFields_customFieldItems record {
    # The ID of the Custom Field
    anydata idCustomField?;
    cardsidCardcustomFields_value value?;
    # The ID of the option for the list type Custom Field. This is optional if Custom Field is not list type.
    anydata idValue?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
|};

public type Enterprise_licenses record {
    decimal? maxMembers?;
    decimal totalMembers?;
    Enterprise_licenses_relatedEnterprises[] relatedEnterprises?;
};

public type id_5 TrelloID|string;

public type Action_data_card record {
    TrelloID id?;
    string name?;
    int idShort?;
    string shortLink?;
};

# Represents the Queries record for the operation: get-cards-id-list
public type GetCardsIdListQueries record {
    # `all` or a comma-separated list of list [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "all";
};

public type id_4 TrelloID|string;

public type id_7 TrelloID|string;

public type Enterprise_organizationPrefs record {
    record {} boardVisibilityRestrict?;
    record {} boardDeleteRestrict?;
    ("computer"|"trello"|"google-drive"|"box"|"onedrive"|"link")[] attachmentRestrictions?;
};

public type id_6 string|TrelloID;

# Represents the Queries record for the operation: get-notifications-id-card
public type GetNotificationsIdCardQueries record {
    # `all` or a comma-separated list of card [fields](/cloud/trello/guides/rest-api/object-definitions/)
    CardFields fields?;
};

public type PluginData record {
    TrelloID id?;
    TrelloID idPlugin?;
    "member"|"board"|"organization"|"card" scope?;
    TrelloID idModel?;
    string value?;
    "private"|"shared" access?;
};

# Represents the Queries record for the operation: post-notifications-all-read
public type PostNotificationsAllReadQueries record {
    # Boolean to specify whether to mark as read or unread (defaults to `true`, marking as read)
    boolean read = true;
    # A comma-seperated list of IDs. Allows specifying an array of notification IDs to change the read state for. This will become useful as we add grouping of notifications to the UI, with a single button to mark all notifications in the group as read/unread.
    TrelloID[] ids?;
};

# Represents the Queries record for the operation: get-lists-id-board
public type GetListsIdBoardQueries record {
    # `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/#board-object)
    string fields = "all";
};

public type LimitsObject record {
    "ok"|"warning" status?;
    decimal disableAt?;
    decimal warnAt?;
};

public type customFields_body record {
    TrelloID idModel;
    # The type of model that the Custom Field is being defined on. This should always be `board`.
    "board" modelType;
    # The name of the Custom Field
    string name;
    # The type of Custom Field to create.
    "checkbox"|"list"|"number"|"text"|"date" 'type;
    # If the type is `checkbox` 
    string options?;
    posStringOrNumber pos;
    # Whether this Custom Field should be shown on the front of Cards
    boolean display_cardFront = true;
};

# Represents the Queries record for the operation: put-organizations-id-members-idmember
public type PutOrganizationsIdMembersIdmemberQueries record {
    # One of: `admin`, `normal`
    "admin"|"normal" 'type;
};

# Represents the Queries record for the operation: get-boards-id-memberships
public type GetBoardsIdMembershipsQueries record {
    # One of `admins`, `all`, `none`, `normal`
    "admins"|"all"|"none"|"normal" filter = "all";
    # Works for premium organizations only.
    boolean activity = false;
    # Fields to show if `member=true`. Valid values: [nested member resource fields](/cloud/trello/guides/rest-api/nested-resources/).
    MemberFields member_fields?;
    # Shows the type of member to the org the user is. For instance, an org admin will have a `orgMemberType` of `admin`.
    boolean orgMemberType = false;
    # Determines whether to include a [nested member object](/cloud/trello/guides/rest-api/nested-resources/).
    boolean member = false;
};

# Represents the Queries record for the operation: put-webhooks-id
public type PutWebhooksIdQueries record {
    # A string with a length from `0` to `16384`.
    @constraint:String {maxLength: 16384}
    string description?;
    # Determines whether the webhook is active and sending `POST` requests.
    boolean active?;
    # A valid URL that is reachable with a `HEAD` and `POST` request.
    string callbackURL?;
    # ID of the model to be monitored
    TrelloID idModel?;
};

# Represents the Queries record for the operation: get-members-id-organizations
public type GetMembersIdOrganizationsQueries record {
    # One of: `all`, `members`, `none`, `public` (Note: `members` filters to only private Workspaces)
    "all"|"members"|"none"|"public" filter = "all";
    # Whether or not to include paid account information in the returned workspace object
    boolean paid_account = false;
    # `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
    OrganizationFields fields?;
};

public type Enterprise_licenses_relatedEnterprises record {
    string name?;
    string displayName?;
    decimal count?;
};

public type MemberPrefs_privacy record {
    "public"|"private"|"collaborator" fullName?;
    "public"|"private"|"collaborator" avatar?;
};

public type Action_data record {
    string text?;
    Action_data_card card?;
    Action_data_board board?;
    Action_data_list list?;
};

public type Action_display_entities_contextOn record {
    string 'type?;
    string translationKey?;
    boolean hideIfContext?;
    TrelloID idContext?;
};

public type id_1 TrelloID|string;

public type id_3 TrelloID|string;

public type notificationsChannelSettings_channel_body record {
    # Singular key or array of notification keys
    BlockedKey|BlockedKey[] blockedKeys;
};

public type id_2 TrelloID|string;

public type Enterprise_prefs record {
    boolean ssoOnly?;
    Enterprise_prefs_signup signup?;
    string? mandatoryTransferDate?;
    string brandingColor?;
    boolean autoJoinOrganizations?;
    record {} notifications?;
    decimal? maxMembers?;
};

public type attachments "cover"|boolean;

# Represents the Queries record for the operation: get-labels-id
public type GetLabelsIdQueries record {
    # all or a comma-separated list of [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "all";
};

public type SavedSearch record {
    TrelloID id?;
    string name?;
    string query?;
    posStringOrNumber pos?;
};

# Represents the Queries record for the operation: get-cards-id-stickers
public type GetCardsIdStickersQueries record {
    # `all` or a comma-separated list of sticker [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "all";
};

# Represents the Queries record for the operation: put-boards-id-myPrefs-showsidebaractivity
public type PutBoardsIdMyprefsShowsidebaractivityQueries record {
    # Determines whether to show sidebar activity.
    boolean value;
};

# Represents the Queries record for the operation: put-enterprises-id-members-idmember-licensed
public type PutEnterprisesIdMembersIdmemberLicensedQueries record {
    # Boolean value to determine whether the user should be given an Enterprise license (true) or not (false).
    boolean value;
};

public type PendingOrganizations record {
    TrelloID id?;
    TrelloID idMember?;
    PendingOrganizations_memberRequestor memberRequestor?;
    string date?;
    string displayName?;
    decimal membershipCount?;
    string? logoUrl?;
    PendingOrganizations_transferability transferability?;
};

# Represents the Queries record for the operation: put-boards-id-myPrefs-showsidebar
public type PutBoardsIdMyprefsShowsidebarQueries record {
    # Determines whether to show the side bar.
    boolean value;
};

# Represents the Queries record for the operation: get-notifications-id-organization
public type GetNotificationsIdOrganizationQueries record {
    # `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
    OrganizationFields fields?;
};

public type Notification record {
    string id?;
    boolean unread?;
    "cardDueSoon" 'type?;
    string date?;
    string dateRead?;
    string data?;
    Card card?;
    Board board?;
    TrelloID idMemberCreator?;
    TrelloID idAction?;
    record {}[] reactions?;
};

# Represents the Queries record for the operation: get-enterprises-id-signupurl
public type GetEnterprisesIdSignupurlQueries record {
    # Designates whether the user has seen/consented to the Trello ToS prior to being redirected to the enterprise signup page/their IdP.
    boolean tosAccepted = false;
    # 
    boolean authenticate = false;
    # 
    boolean confirmationAccepted = false;
    # Any valid URL.
    string? returnUrl?;
};

# Represents the Queries record for the operation: get-checklists-id-checkitems
public type GetChecklistsIdCheckitemsQueries record {
    # One of: `all`, `none`.
    "all"|"none" filter = "all";
    # One of: `all`, `name`, `nameData`, `pos`, `state`,`type`, `due`, `dueReminder`, `idMember`.
    "all"|"name"|"nameData"|"pos"|"state"|"type"|"due"|"dueReminder"|"idMember" fields = "name, nameData, pos, state, due, dueReminder, idMember";
};

# An object containing the key and value to set for the card's Custom Field value. The key used to set the value should match the type of Custom Field defined. This is optional if Custom Field is list type.
public type cardsidCardcustomFields_value record {
    string text?;
    boolean checked?;
    string date?;
    decimal number?;
};

public type pos "top"|"bottom"|float;

# Represents the Queries record for the operation: get-lists-id-actions
public type GetListsIdActionsQueries record {
    # A comma-separated list of [action types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/).
    string filter?;
};

# Represents the Queries record for the operation: put-actions-id
public type PutActionsIdQueries record {
    # The new text for the comment
    string text;
};

public type TokenFields "identifier"|"idMember"|"dateCreated"|"dateExpires"|"permissions";

# Represents the Queries record for the operation: get-search-members
public type GetSearchMembersQueries record {
    # 
    TrelloID idBoard?;
    # 
    boolean onlyOrgMembers = false;
    # Search query 1 to 16384 characters long
    @constraint:String {maxLength: 16394, minLength: 1}
    string query;
    # The maximum number of results to return. Maximum of 20.
    @constraint:Int {maxValue: 20}
    int:Signed32 'limit = 8;
    # 
    TrelloID idOrganization?;
};

# Represents the Queries record for the operation: get-members-id-boardbackgrounds
public type GetMembersIdBoardbackgroundsQueries record {
    # One of: `all`, `custom`, `default`, `none`, `premium`
    "all"|"custom"|"default"|"none"|"premium" filter = "all";
};

# Represents the Queries record for the operation: post-lists
public type PostListsQueries record {
    # The long ID of the board the list should be created on
    TrelloID idBoard;
    # ID of the List to copy into the new List
    TrelloID idListSource?;
    # Position of the list. `top`, `bottom`, or a positive floating point number
    pos_3 pos?;
    # Name for the list
    string name;
};

public type NotificationChannelSettings record {
    string id?;
    TrelloID idMember?;
    BlockedKey[] blockedKeys?;
    Channel channel?;
};

public type NotificationFields "id"|"unread"|"type"|"date"|"dateRead"|"data"|"card"|"board"|"idMemberCreator"|"idAction"|"reactions";

# Represents the Queries record for the operation: membersidcustomemojiidemoji
public type MembersidcustomemojiidemojiQueries record {
    # `all` or a comma-separated list of `name`, `url`
    "name"|"url"|"all" fields = "all";
};

# Represents the Queries record for the operation: get-tokens-token
public type GetTokensTokenQueries record {
    # Determines whether to include webhooks.
    boolean webhooks = false;
    # `all` or a comma-separated list of `dateCreated`, `dateExpires`, `idMember`, `identifier`, `permissions`
    TokenFields fields?;
};

public type PendingOrganizations_memberRequestor record {
    TrelloID id?;
    string fullName?;
};

# Represents the Queries record for the operation: post-cards-id-idlabels
public type PostCardsIdIdlabelsQueries record {
    # The ID of the label to add
    TrelloID value?;
};

# Represents the Queries record for the operation: get-actions-id-member
public type GetActionsIdMemberQueries record {
    # `all` or a comma-separated list of member fields
    MemberFields fields?;
};

public type Action_display record {
    string translationKey?;
    Action_display_entities entities?;
};

# Represents the Queries record for the operation: put-labels-id
public type PutLabelsIdQueries record {
    # The new color for the label. See: [fields](/cloud/trello/guides/rest-api/object-definitions/) for color options
    Color? color?;
    # The new name for the label
    string name?;
};

# Represents the Queries record for the operation: put-labels-id-field
public type PutLabelsIdFieldQueries record {
    # The new value for the field.
    TrelloID value;
};

# Represents the Queries record for the operation: put-cards-idcard-checklist-idchecklist-checkitem-idcheckitem
public type PutCardsIdcardChecklistIdchecklistCheckitemIdcheckitemQueries record {
    # `top`, `bottom`, or a positive float
    posStringOrNumber pos?;
};

# Represents the Queries record for the operation: put-lists-id
public type PutListsIdQueries record {
    # Whether the active member is subscribed to this list
    boolean subscribed?;
    # ID of a board the list should be moved to
    TrelloID idBoard?;
    # New position for the list: `top`, `bottom`, or a positive floating point number
    pos_2 pos?;
    # New name for the list
    string name?;
    # Whether the list should be closed (archived)
    boolean closed?;
};

# Represents the Queries record for the operation: emoji
public type EmojiQueries record {
    # The locale to return emoji descriptions and names in. Defaults to the logged in member's locale.
    string locale?;
    # `true` to return spritesheet URLs in the response
    boolean spritesheets = false;
};

public type ActionFields "id"|"idMemberCreator"|"data"|"type"|"date"|"limits"|"display"|"memberCreator";

# Represents the Queries record for the operation: get-members=id
public type GetMembersIdQueries record {
    # 
    boolean savedSearches = false;
    # One of: `all`, `custom`, `default`, `none`, `premium`
    "all"|"custom"|"default"|"none"|"premium" boardBackgrounds = "none";
    # See the [Cards Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#cards-nested-resource) for additional options
    string cards = "none";
    # Whether or not to include paid account information in the returned member object
    # 
    # # Deprecated
    @deprecated
    boolean paid_account = false;
    # One of: `all`, `members`, `none`, `public`
    "all"|"members"|"none"|"public" organizationsInvited = "none";
    # See the [Boards Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#boards-nested-resource)
    string boards?;
    # `all` or `none`
    "all"|"none" customBoardBackgrounds = "none";
    # `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
    OrganizationFields organizationsInvited_fields?;
    # `all` or `none`
    "all"|"none" customEmoji = "none";
    # `all` or `none`
    "all"|"none" customStickers = "none";
    # `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
    BoardFields boardsInvited_fields?;
    # `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
    OrganizationFields organization_fields?;
    # `all` or a comma-separated list of: closed, members, open, organization, pinned, public, starred, unpinned
    "closed"|"members"|"open"|"organization"|"pinned"|"public"|"starred"|"unpinned" boardsInvited?;
    # Whether to return the boardStars or not
    boolean boardStars = false;
    # Whether or not to include paid account information in the returned workspace object
    boolean organization_paid_account = false;
    # One of: `all`, `members`, `none`, `public`
    "all"|"members"|"none"|"public" organizations = "none";
    # `all` or `none`
    "all"|"none" tokens = "none";
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    MemberFields fields?;
    # See the [Actions Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#actions-nested-resource)
    string actions?;
    # See the [Notifications Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#notifications-nested-resource)
    string notifications?;
};

# Represents the Queries record for the operation: put-organizations-id-members
public type PutOrganizationsIdMembersQueries record {
    # Name for the member, at least 1 character not beginning or ending with a space
    @constraint:String {minLength: 1}
    string fullName;
    # One of: `admin`, `normal`
    "admin"|"normal" 'type = "normal";
    # An email address
    string email;
};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

public type CustomField_display record {
    boolean cardFront?;
    string name?;
    string pos?;
    CustomField_display_options[] options?;
};

# Represents the Queries record for the operation: get-members-id-organizationsinvited
public type GetMembersIdOrganizationsinvitedQueries record {
    # `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
    OrganizationFields fields?;
};

public type Webhook record {
    TrelloID id?;
    string description?;
    TrelloID idModel?;
    string callbackURL?;
    boolean active?;
    decimal consecutiveFailures?;
    string? firstConsecutiveFailDate?;
};

# Represents the Queries record for the operation: get-organizations-id-memberships
public type GetOrganizationsIdMembershipsQueries record {
    # `all` or a comma-separated list of: `active`, `admin`, `deactivated`, `me`, `normal`
    "all"|"active"|"admin"|"deactivated"|"me"|"normal" filter = "all";
    # Whether to include the Member objects with the Memberships
    boolean member = false;
};

# Represents the Queries record for the operation: put-cards-id
public type PutCardsIdQueries record {
    # The ID of the board the card should be on
    TrelloID idBoard?;
    # For use with/by the Map View
    string address?;
    # For use with/by the Map View
    string locationName?;
    # Comma-separated list of label IDs
    TrelloID idLabels?;
    # The start date of a card, or `null`
    string? 'start?;
    # Whether the due date should be marked complete
    boolean dueComplete?;
    # For use with/by the Map View. Should be latitude,longitude
    string coordinates?;
    # The ID of the list the card should be in
    TrelloID idList?;
    # Comma-separated list of member IDs
    TrelloID idMembers?;
    # Updates the card's cover
    #  | Option | Values | About |
    #  |--------|--------|-------|
    #  | color | `pink`, `yellow`, `lime`, `blue`, `black`, `orange`, `red`, `purple`, `sky`, `green` | Makes the cover a solid color . |
    #  | brightness | `dark`, `light` | Determines whether the text on the cover should be dark or light.
    #  | url | An unsplash URL: https://images.unsplash.com | Used if making an image the cover. Only Unsplash URLs work.
    #  | idAttachment | ID of an attachment on the card | Used if setting an attached image as the cover. |
    #  | size | `normal`, `full` | Determines whether to show the card name on the cover, or below it. |
    #  
    #  `brightness` can be sent alongside any of the other parameters, but all of the other parameters are mutually exclusive; you can not have the cover be a `color` and an `idAttachment` at the same time. 
    #  
    #  On the brightness options, setting it to light will make the text on the card cover dark:
    #  ![](/cloud/trello/images/rest/cards/cover-brightness-dark.png)
    #  
    #  And vice versa, setting it to dark will make the text on the card cover light: 
    #  ![](/cloud/trello/images/rest/cards/cover-brightness-light.png) 
    cover cover?;
    # Whether the member is should be subscribed to the card
    boolean subscribed?;
    # The position of the card in its list. `top`, `bottom`, or a positive float
    pos_1 pos?;
    # When the card is due, or `null`
    string? due?;
    # The ID of the image attachment the card should use as its cover, or null for none
    TrelloID idAttachmentCover?;
    # The new name for the card
    string name?;
    # Whether the card should be archived (closed: true)
    boolean closed?;
    # The new description for the card
    string desc?;
};

# Represents the Queries record for the operation: enterprises-id-members-idMember-deactivated
public type EnterprisesIdMembersIdmemberDeactivatedQueries record {
    # Any valid value that the [nested board resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
    BoardFields board_fields?;
    # Any valid value that the [nested organization resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
    OrganizationFields organization_fields?;
    # A comma separated list of any valid values that the [nested member field resource]() accepts.
    MemberFields fields?;
    # Determines whether the user is deactivated or not.
    boolean value;
};

# Represents the Queries record for the operation: get-enterprises-id-claimableOrganizations
public type GetEnterprisesIdClaimableorganizationsQueries record {
    # Specifies the sort order to return matching documents
    string cursor?;
    # Date in YYYY-MM-DD format indicating the date to search up to for activeness of workspace
    string activeSince?;
    # Date in YYYY-MM-DD format indicating the date to search up to for inactiveness of workspace
    string inactiveSince?;
    # Limits the number of workspaces to be sorted
    int 'limit?;
    # Name of the enterprise to retrieve workspaces for
    string name?;
};

# Represents the Queries record for the operation: membersidavatar
public type MembersidavatarQueries record {
    # 
    record {byte[] fileContent; string fileName;} file;
};

# Represents the Queries record for the operation: post-members-id-customstickers
public type PostMembersIdCustomstickersQueries record {
    # 
    record {byte[] fileContent; string fileName;} file;
};

public type Label record {
    TrelloID id?;
    TrelloID idBoard?;
    # The name displayed for the label.
    string? name?;
    Color? color?;
};

public type Action_display_entities record {
    Action_display_entities_contextOn contextOn?;
    Action_display_entities_card card?;
    Action_display_entities_comment comment?;
    Action_display_entities_memberCreator memberCreator?;
};

# Represents the Queries record for the operation: post-boards-id-boardplugins
public type PostBoardsIdBoardpluginsQueries record {
    # The ID of the Power-Up to enable
    TrelloID idPlugin?;
};

# Represents the Queries record for the operation: get-boards-id-lists
public type GetBoardsIdListsQueries record {
    # Filter to apply to Lists
    ViewFilter filter?;
    # `all` or a comma-separated list of card [fields](/cloud/trello/guides/rest-api/object-definitions/#card-object)
    string card_fields = "all";
    # Filter to apply to Cards.
    ViewFilter cards?;
    # `all` or a comma-separated list of list [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "all";
};

# Represents the Queries record for the operation: get-batch
public type GetBatchQueries record {
    # A list of API routes. Maximum of 10 routes allowed. The routes should begin with a forward slash and should not include the API version number - e.g. "urls=/members/trello,/cards/[cardId]"
    string urls;
};

public type Action_display_entities_card record {
    string 'type?;
    boolean hideIfContext?;
    TrelloID id?;
    string shortLink?;
    string text?;
};

public type Attachment record {
    TrelloID id?;
    string? bytes?;
    string date?;
    Color? edgeColor?;
    TrelloID idMember?;
    boolean isUpload?;
    string mimeType?;
    string name?;
    string[] previews?;
    string url?;
    float pos?;
};

# Represents the Queries record for the operation: post-boards-id-lists
public type PostBoardsIdListsQueries record {
    # Determines the position of the list. Valid values: `top`, `bottom`, or a positive number.
    string pos = "top";
    # The name of the list to be created. 1 to 16384 characters long.
    string name;
};

public type CustomFieldItems_value record {
    string checked?;
};

# Represents the Queries record for the operation: get-cards-id
public type GetCardsIdQueries record {
    # Whether to return the checklists on the card. `all` or `none`
    string checklists = "none";
    # Whether to return member objects for members who voted on the card
    boolean membersVoted = false;
    # Whether to include the customFieldItems
    boolean customFieldItems = false;
    # `true`, `false`, or `cover`
    attachments attachments?;
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/). **Defaults**: `avatarHash, fullName, initials, username`
    string member_fields?;
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/). **Defaults**: `avatarHash, fullName, initials, username`
    string memberVoted_fields?;
    # `all` or a comma-separated list of sticker [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string sticker_fields = "all";
    # See the [Lists Nested Resource](/cloud/trello/guides/rest-api/nested-resources/)
    boolean list = false;
    # 
    boolean checkItemStates = false;
    # `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/#board-object). **Defaults**: `name, desc, descData, closed, idOrganization, pinned, url, prefs`
    string board_fields?;
    # `all` or a comma-separated list of attachment [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string attachment_fields = "all";
    # Whether to return member objects for members on the card
    boolean members = false;
    # Whether to include pluginData on the card with the response
    boolean pluginData = false;
    # Whether to include sticker models with the response
    boolean stickers = false;
    # `all` or a comma-separated list of [fields](/cloud/trello/guides/rest-api/object-definitions/). **Defaults**: `badges, checkItemStates, closed, dateLastActivity, desc, descData, due, start, idBoard, idChecklists, idLabels, idList, idMembers, idShort, idAttachmentCover, manualCoverAttachment, labels, name, pos, shortUrl, url`
    string fields?;
    # `all` or a comma-separated list of `idBoard,idCard,name,pos`
    string checklist_fields = "all";
    # See the [Actions Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#actions-nested-resource)
    string actions?;
    # Whether to return the board object the card is on
    boolean board = false;
};

# Represents the Queries record for the operation: put-lists-id-closed
public type PutListsIdClosedQueries record {
    # Set to true to close (archive) the list
    TrelloID value?;
};

# Represents the Queries record for the operation: get-members-id-boardsinvited
public type GetMembersIdBoardsinvitedQueries record {
    # `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
    BoardFields fields?;
};

public type CustomFieldItems record {
    TrelloID id?;
    CustomFieldItems_value value?;
    TrelloID idCustomField?;
    TrelloID idModel?;
    "card"|"board"|"member" modelType?;
};

# Represents the Queries record for the operation: get-checklists-id
public type GetChecklistsIdQueries record {
    # Valid values: `all`, `closed`, `none`, `open`, `visible`. Cards is a nested resource. The additional query params available are documented at [Cards Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#cards-nested-resource).
    "all"|"closed"|"none"|"open"|"visible" cards = "none";
    # The fields on the checkItem to return if checkItems are being returned. `all` or a comma-separated list of: `name`, `nameData`, `pos`, `state`, `type`, `due`, `dueReminder`, `idMember`
    "all"|"name"|"nameData"|"pos"|"state"|"type"|"due"|"dueReminder"|"idMember" checkItem_fields = "name, nameData, pos, state, due, dueReminder, idMember";
    # The check items on the list to return. One of: `all`, `none`.
    "all"|"none" checkItems = "all";
    # `all` or a comma-separated list of checklist [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "all";
};

# Represents the Queries record for the operation: get-actions-id-card
public type GetActionsIdCardQueries record {
    # `all` or a comma-separated list of card fields
    CardFields fields?;
};

public type posStringOrNumber "top"|"bottom"|float;

public type EnterpriseAuditLog_organization_enterpriseJoinRequest record {
    TrelloID idEnterprise?;
    TrelloID idMember?;
    string date?;
};

public type ImageDescriptor record {
    # The width of the image.
    int width?;
    # The height of the image.
    int height?;
    # The URL of the image.
    string url?;
};

# Represents the Queries record for the operation: post-organizations-id-exports
public type PostOrganizationsIdExportsQueries record {
    # Whether the CSV should include attachments or not.
    boolean attachments = true;
};

public type customFields_id_body record {
    # The name of the Custom Field
    string name?;
    posStringOrNumber pos?;
    # Whether to display this custom field on the front of cards
    boolean display\/cardFront?;
};

# Represents the Queries record for the operation: post-checklists
public type PostChecklistsQueries record {
    # The ID of a checklist to copy into the new checklist.
    TrelloID idChecklistSource?;
    # The position of the checklist on the card. One of: `top`, `bottom`, or a positive number.
    posStringOrNumber pos?;
    # The ID of the Card that the checklist should be added to.
    TrelloID idCard;
    # The name of the checklist. Should be a string of length 1 to 16384.
    @constraint:String {maxLength: 16384, minLength: 1}
    string name?;
};

# Represents the Queries record for the operation: post-cards-id-actions-comments
public type PostCardsIdActionsCommentsQueries record {
    # The comment
    string text;
};

public type Color "yellow"|"purple"|"blue"|"red"|"green"|"orange"|"black"|"sky"|"pink"|"lime"?;

# Represents the Queries record for the operation: get-actions-id-list
public type GetActionsIdListQueries record {
    # `all` or a comma-separated list of list fields
    ListFields fields?;
};

# Represents the Queries record for the operation: post-checklists-id-checkitems
public type PostChecklistsIdCheckitemsQueries record {
    # A dueReminder for the due date on the checkitem
    decimal? dueReminder?;
    # The position of the check item in the checklist. One of: `top`, `bottom`, or a positive number.
    posStringOrNumber pos?;
    # A due date for the checkitem
    string due?;
    # An ID of a member resource.
    TrelloID idMember?;
    # The name of the new check item on the checklist. Should be a string of length 1 to 16384.
    @constraint:String {maxLength: 16384, minLength: 1}
    string name;
    # Determines whether the check item is already checked when created.
    boolean checked = false;
};

public type MemberPrefs_twoFactor record {
    boolean enabled?;
    boolean needsNewBackups?;
};

# Represents the Queries record for the operation: post-enterprises-id-tokens
public type PostEnterprisesIdTokensQueries record {
    # One of: `1hour`, `1day`, `30days`, `never`
    string expiration = "none";
};

public type idAction_reactions_body record {
    # The primary `shortName` of the emoji to add. See [/emoji](#emoji)
    string shortName?;
    # The `skinVariation` of the emoji to add. See [/emoji](#emoji)
    string skinVariation?;
    # The emoji to add as a native unicode emoji. See [/emoji](#emoji)
    string native?;
    # The `unified` value of the emoji to add. See [/emoji](#emoji)
    string unified?;
};

# Represents the Queries record for the operation: get-cards-id-stickers-idsticker
public type GetCardsIdStickersIdstickerQueries record {
    # `all` or a comma-separated list of sticker [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "all";
};

public type Checklist record {
    TrelloID id?;
};

# Represents the Queries record for the operation: post-tokens-token-webhooks
public type PostTokensTokenWebhooksQueries record {
    # A description to be displayed when retrieving information about the webhook.
    string description?;
    # The URL that the webhook should POST information to.
    string callbackURL;
    # ID of the object to create a webhook on.
    TrelloID idModel;
};

# Represents the Queries record for the operation: post-cards-id-attachments
public type PostCardsIdAttachmentsQueries record {
    # The file to attach, as multipart/form-data
    record {byte[] fileContent; string fileName;} file?;
    # Determines whether to use the new attachment as a cover for the Card.
    boolean setCover = false;
    # The name of the attachment. Max length 256.
    string name?;
    # The mimeType of the attachment. Max length 256
    string mimeType?;
    # A URL to attach. Must start with `http://` or `https://`
    string url?;
};

# Represents the Queries record for the operation: get-boards-id-labels
public type GetBoardsIdLabelsQueries record {
    # The number of Labels to be returned.
    @constraint:Int {minValue: 0, maxValue: 1000}
    int:Signed32 'limit = 50;
    # The fields to be returned for the Labels.
    Label fields?;
};

# Represents the Queries record for the operation: post-organizations
public type PostOrganizationsQueries record {
    # A URL starting with `http://` or `https://`
    string website?;
    # The name to display for the Organization
    string displayName;
    # A string with a length of at least 3. Only lowercase letters, underscores, and numbers are allowed. If the name contains invalid characters, they will be removed. If the name conflicts with an existing name, a new name will be substituted.
    @constraint:String {minLength: 3}
    string name?;
    # The description for the organizations
    string desc?;
};

public type Action_limits_reactions_perAction record {
    string status?;
    decimal disableAt?;
    decimal warnAt?;
};

public type Action record {
    TrelloID id?;
    TrelloID idMemberCreator?;
    Action_data data?;
    string 'type?;
    string date?;
    Action_limits limits?;
    Action_display display?;
    Action_memberCreator memberCreator?;
};

public type Card_badges_attachmentsByType record {
    Card_badges_attachmentsByType_trello trello?;
};

public type OrganizationFields "id"|"name";

public type Action_memberCreator record {
    TrelloID id?;
    boolean activityBlocked?;
    string avatarHash?;
    string avatarUrl?;
    string fullName?;
    TrelloID idMemberReferrer?;
    string initials?;
    string username?;
};

# Represents the Queries record for the operation: post-cards-id-stickers
public type PostCardsIdStickersQueries record {
    # For custom stickers, the id of the sticker. For default stickers, the string identifier (like 'taco-cool', see below)
    string image;
    # The rotation of the sticker
    @constraint:Float {minValue: 0, maxValue: 360}
    float rotate = 0;
    # The top position of the sticker, from -60 to 100
    @constraint:Float {minValue: -60, maxValue: 100}
    float top;
    # The left position of the sticker, from -60 to 100
    @constraint:Float {minValue: -60, maxValue: 100}
    float left;
    # The z-index of the sticker
    int zIndex;
};

public type CustomSticker_scaled record {
    TrelloID id?;
};

# Represents the Queries record for the operation: post-boards
public type PostBoardsQueries record {
    # Determines whether card covers are enabled.
    boolean prefs_cardCovers = true;
    # The id of a custom background or one of: `blue`, `orange`, `green`, `red`, `purple`, `pink`, `lime`, `sky`, `grey`.
    "blue"|"orange"|"green"|"red"|"purple"|"pink"|"lime"|"sky"|"grey" prefs_background = "blue";
    # Determines whether to use the default set of labels.
    boolean defaultLabels = true;
    # Who can vote on this board. One of `disabled`, `members`, `observers`, `org`, `public`.
    "disabled"|"members"|"observers"|"org"|"public" prefs_voting = "disabled";
    # Determines what types of members can invite users to join. One of: `admins`, `members`.
    "members"|"admins" prefs_invitations = "members";
    # Determines whether users can join the boards themselves or whether they have to be invited.
    boolean prefs_selfJoin = true;
    # The permissions level of the board. One of: `org`, `private`, `public`.
    "org"|"private"|"public" prefs_permissionLevel = "private";
    # Determines the type of card aging that should take place on the board if card aging is enabled. One of: `pirate`, `regular`.
    "pirate"|"regular" prefs_cardAging = "regular";
    # The id of a board to copy into the new board.
    TrelloID idBoardSource?;
    # Who can comment on cards on this board. One of: `disabled`, `members`, `observers`, `org`, `public`.
    "disabled"|"members"|"observers"|"org"|"public" prefs_comments = "members";
    # The new name for the board. 1 to 16384 characters long.
    @constraint:String {maxLength: 16384, minLength: 1}
    string name;
    # The id or name of the Workspace the board should belong to.
    TrelloID idOrganization?;
    # Determines whether to add the default set of lists to a board (To Do, Doing, Done). It is ignored if `idBoardSource` is provided.
    boolean defaultLists = true;
    # To keep cards from the original board pass in the value `cards`
    "cards"|"none" keepFromSource = "none";
    # A new description for the board, 0 to 16384 characters long
    @constraint:String {maxLength: 16384}
    string desc?;
    # The Power-Ups that should be enabled on the new board. One of: `all`, `calendar`, `cardAging`, `recap`, `voting`.
    "all"|"calendar"|"cardAging"|"recap"|"voting" powerUps?;
};

# The fields on a Card.
public type CardFields "id"|"address"|"badges"|"checkItemStates"|"closed"|"coordinates"|"creationMethod"|"dueComplete"|"dateLastActivity"|"desc"|"descData"|"due"|"dueReminder"|"idBoard"|"idChecklists"|"idLabels"|"idList"|"idMembers"|"idMembersVoted"|"idShort"|"idAttachmentCover"|"labels"|"limits"|"locationName"|"manualCoverAttachment"|"name"|"pos"|"shortLink"|"shortUrl"|"subscribed"|"url"|"cover"|"isTemplate";

# Represents the Queries record for the operation: put-boards-id
public type PutBoardsIdQueries record {
    # One of: pirate, regular
    string prefs\/cardAging?;
    # Name for the orange label. 1 to 16384 characters long
    string labelNames\/orange?;
    # Determines whether the calendar feed is enabled or not.
    boolean prefs\/calendarFeedEnabled?;
    # One of: org, private, public
    string prefs\/permissionLevel?;
    # Name for the yellow label. 1 to 16384 characters long
    string labelNames\/yellow?;
    # Name for the purple label. 1 to 16384 characters long
    string labelNames\/purple?;
    # Who can invite people to this board. One of: admins, members
    string prefs\/invitations?;
    # Who can vote on this board. One of disabled, members, observers, org, public
    string prefs\/voting?;
    # Who can comment on cards on this board. One of: disabled, members, observers, org, public
    string prefs\/comments?;
    # Name for the blue label. 1 to 16384 characters long
    string labelNames\/blue?;
    # The id of a custom background or one of: blue, orange, green, red, purple, pink, lime, sky, grey
    string prefs\/background?;
    # Name for the red label. 1 to 16384 characters long
    string labelNames\/red?;
    # Whether the acting user is subscribed to the board
    TrelloID subscribed?;
    # The new name for the board. 1 to 16384 characters long.
    string name?;
    # The id of the Workspace the board should be moved to
    string idOrganization?;
    # Whether Workspace members can join the board themselves
    boolean prefs\/selfJoin?;
    # Whether the board is closed
    boolean closed?;
    # Whether card covers should be displayed on this board
    boolean prefs\/cardCovers?;
    # Name for the green label. 1 to 16384 characters long
    string labelNames\/green?;
    # Determines whether the Voting Power-Up should hide who voted on cards or not.
    boolean prefs\/hideVotes?;
    # A new description for the board, 0 to 16384 characters long
    string desc?;
};

public type Action_display_entities_comment record {
    string 'type?;
    string text?;
};

public type TrelloList record {
    TrelloID id?;
    # The name of the list
    string name?;
    boolean closed?;
    decimal pos?;
    string softLimit?;
    string idBoard?;
    boolean subscribed?;
    Limits limits?;
};

public type ListFields "id";

# Represents the Queries record for the operation: get-cards-id-checkitemstates
public type GetCardsIdCheckitemstatesQueries record {
    # `all` or a comma-separated list of: `idCheckItem`, `state`
    string fields = "all";
};

# Represents the Queries record for the operation: post-cards
public type PostCardsQueries record {
    # For use with/by the Map View
    string address?;
    # For use with/by the Map View
    string locationName?;
    # Comma-separated list of label IDs to add to the card
    (TrelloID)[] idLabels?;
    # The ID of a card to copy into the new card
    TrelloID idCardSource?;
    # The start date of a card, or `null`
    string? 'start?;
    boolean dueComplete?;
    # For use with/by the Map View. Should take the form latitude,longitude
    string coordinates?;
    # A URL starting with `http://` or `https://`. The URL will be attached to the card upon creation.
    string urlSource?;
    # 
    record {byte[] fileContent; string fileName;} fileSource?;
    # The ID of the list the card should be created in
    TrelloID idList;
    # The mimeType of the attachment. Max length 256
    string mimeType?;
    # Comma-separated list of member IDs to add to the card
    (TrelloID)[] idMembers?;
    # The position of the new card. `top`, `bottom`, or a positive float
    pos pos?;
    # A due date for the card
    string due?;
    # The name for the card
    string name?;
    # If using `idCardSource` you can specify which properties to copy over. `all` or comma-separated list of: `attachments,checklists,customFields,comments,due,start,labels,members,start,stickers`
    "all"|"attachments"|"checklists"|"comments"|"customFields"|"due"|"start"|"labels"|"members"|"start"|"stickers" keepFromSource = "all";
    # The description for the card
    string desc?;
};

public type listings_idListing_body record {
    # The description to show for the given locale
    string description?;
    # The locale that this listing should be displayed for.
    string locale?;
    # The overview to show for the given locale.
    string overview?;
    # The name to use for the given locale.
    string name?;
};

# Represents the Queries record for the operation: put-boards-id-myprefs-emailposition
public type PutBoardsIdMyprefsEmailpositionQueries record {
    # Valid values: bottom, top. Determines the position of the email address.
    "bottom"|"top" value;
};

public type Action_display_entities_memberCreator record {
    string 'type?;
    TrelloID id?;
    string username?;
    string text?;
};

# Represents the Queries record for the operation: get-notifications-id-list
public type GetNotificationsIdListQueries record {
    # `all` or a comma-separated list of list [fields](/cloud/trello/guides/rest-api/object-definitions/)
    ListFields fields?;
};

# Represents the Queries record for the operation: get-actions-id-organization
public type GetActionsIdOrganizationQueries record {
    # `all` or a comma-separated list of organization fields
    OrganizationFields fields?;
};

# Represents the Queries record for the operation: get-cards-id-checklists
public type GetCardsIdChecklistsQueries record {
    # `all` or `none`
    "all"|"none" filter = "all";
    # `all` or a comma-separated list of: `name,nameData,pos,state,type,due,dueReminder,idMember`
    "name"|"nameData"|"pos"|"state"|"type"|"due"|"dueReminder"|"idMember" checkItem_fields = "name,nameData,pos,state,due,dueReminder,idMember";
    # `all` or `none`
    "all"|"none" checkItems = "all";
    # `all` or a comma-separated list of: `idBoard,idCard,name,pos`
    "all"|"name"|"nameData"|"pos"|"state"|"type" fields = "all";
};

# Represents the Queries record for the operation: get-enterprises-id
public type GetEnterprisesIdQueries record {
    # Whether or not to include paid account information in the returned workspace objects
    boolean organization_paid_accounts = false;
    # One of: `avatarHash`, `fullName`, `initials`, `username`
    string member_fields = "avatarHash, fullName, initials, username";
    # Pass a [SCIM-style query](/cloud/trello/scim/) to filter members. This takes precedence over the all/normal/admins value of members. If any of the member_* args are set, the member array will be paginated.
    string member_filter = "none";
    # Deprecated: Please use member_sort. One of: `ascending`, `descending`, `asc`, `desc`
    string member_sortOrder = "id";
    # Any valid value that the [nested organization field resource]() accepts.
    string organization_fields = "none";
    # Comma-seperated list of: `me`, `normal`, `admin`, `active`, `deactivated`
    string organization_memberships = "none";
    # Any integer between 0 and 100.
    int:Signed32 member_startIndex?;
    # One of: `none`, `normal`, `admins`, `owners`, `all`
    string members = "none";
    # Deprecated: Please use member_sort. This parameter expects a [SCIM-style sorting value](/cloud/trello/scim/). Note that the members array returned will be paginated if `members` is `normal` or `admins`. Pagination can be controlled with `member_startIndex`, etc, and the API response's header will contain the total count and pagination state.
    string member_sortBy = "none";
    # One of: `none`, `members`, `public`, `all`
    string organizations = "none";
    # Comma-separated list of: `id`, `name`, `displayName`, `prefs`, `ssoActivationFailed`, `idAdmins`, `idMembers` (Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data. Read the SCIM documentation [here]() for more information on filtering), `idOrganizations`, `products`, `userTypes`, `idMembers`, `idOrganizations`
    string fields = "all";
    # 0 to 100
    int:Signed32 member_count?;
    # This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting value prefixed by a `-` to sort descending. If no `-` is prefixed, it will be sorted ascending. Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data.
    string member_sort?;
};

# Represents the Queries record for the operation: get-members-id-cards
public type GetMembersIdCardsQueries record {
    # One of: `all`, `closed`, `none`, `open`, `visible`
    "all"|"closed"|"none"|"open"|"visible" filter = "visible";
};

# Represents the Queries record for the operation: put-checklists-id-field
public type PutChecklistsIdFieldQueries record {
    # The value to change the checklist name to. Should be a string of length 1 to 16384.
    value value;
};

public type CustomField_display_value record {
    string text?;
};

public type Enterprise_prefs_signup record {
    string banner?;
    string bannerHtml?;
};

# Represents the Queries record for the operation: get-members-id-notifications
public type GetMembersIdNotificationsQueries record {
    # 
    string filter = "all";
    # 
    boolean entities = false;
    # A notification ID
    string before?;
    # 
    boolean display = false;
    # Max 1000
    int:Signed32 'limit?;
    # 
    boolean memberCreator = true;
    # Max 100
    int:Signed32 page?;
    # One of: `all`, `read`, `unread`
    string read_filter = "all";
    # `all` or a comma-separated list of notification [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "all";
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string memberCreator_fields = "avatarHash,fullName,initials,username";
    # A notification ID
    string since?;
};

public type Card_cover record {
    TrelloID idAttachment?;
    Color? color?;
    boolean? idUploadedBackground?;
    "normal" size?;
    "light"|"dark" brightness?;
    boolean isTemplate?;
};

public type EnterpriseAuditLog record {
    TrelloID idAction?;
    string 'type?;
    string date?;
    EnterpriseAuditLog_memberCreator memberCreator?;
    EnterpriseAuditLog_organization organization?;
    EnterpriseAuditLog_member member?;
};

# Represents the Queries record for the operation: get-notifications-id
public type GetNotificationsIdQueries record {
    # `all` or a comma-separated list of card [fields](/cloud/trello/guides/rest-api/object-definitions/)
    CardFields card_fields?;
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    MemberFields member_fields?;
    # Whether to include the display object with the results
    boolean display = false;
    # Whether to include the list object
    boolean list = false;
    # `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
    BoardFields board_fields?;
    # `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
    OrganizationFields organization_fields?;
    # Whether to include the entities object with the results
    boolean entities = false;
    # Whether to include the organization object
    boolean organization = false;
    # Whether to include the member object
    boolean member = true;
    # Whether to include the member object of the creator
    boolean memberCreator = true;
    # `all` or a comma-separated list of notification [fields](/cloud/trello/guides/rest-api/object-definitions/)
    NotificationFields fields?;
    # Whether to include the board object
    boolean board = false;
    # Whether to include the card object
    boolean card = false;
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    MemberFields memberCreator_fields?;
};

public type Action_limits record {
    Action_limits_reactions reactions?;
};

public type EnterpriseAuditLog_organization record {
    EnterpriseAuditLog_organization_enterpriseJoinRequest? enterpriseJoinRequest?;
    TrelloID id?;
    string name?;
};

# Represents the Queries record for the operation: get-cards-id-attachments
public type GetCardsIdAttachmentsQueries record {
    # Use `cover` to restrict to just the cover attachment
    string filter = "false";
    # `all` or a comma-separated list of attachment [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "all";
};

public type MemberPrefs record {
    MemberPrefs_timezoneInfo timezoneInfo?;
    MemberPrefs_privacy privacy?;
    boolean sendSummaries?;
    int minutesBetweenSummaries?;
    int minutesBeforeDeadlineToNotify?;
    boolean colorBlind?;
    string locale?;
    string timezone?;
    MemberPrefs_twoFactor twoFactor?;
};

# Represents the Queries record for the operation: post-cards-id-checklists
public type PostCardsIdChecklistsQueries record {
    # The ID of a source checklist to copy into the new one
    TrelloID idChecklistSource?;
    # The position of the checklist on the card. One of: `top`, `bottom`, or a positive number.
    string pos?;
    # The name of the checklist
    string name?;
};

public type Token record {
    TrelloID id?;
    string identifier?;
    TrelloID idMember?;
    string dateCreated?;
    string? dateExpires?;
    TokenPermission[] permissions?;
};

# Represents the Queries record for the operation: get-enterprises-id-admins
public type GetEnterprisesIdAdminsQueries record {
    # Any valid value that the [nested member field resource]() accepts.
    string fields = "fullName, userName";
};

public type Board record {
    TrelloID id;
    # The name of the board.
    string name?;
    string desc?;
    string descData?;
    boolean closed?;
    TrelloID idMemberCreator?;
    TrelloID idOrganization?;
    boolean pinned?;
    string url?;
    string shortUrl?;
    Prefs prefs?;
    Board_labelNames labelNames?;
    Limits limits?;
    boolean starred?;
    string memberships?;
    string shortLink?;
    boolean subscribed?;
    string powerUps?;
    string dateLastActivity?;
    string dateLastView?;
    string idTags?;
    string? datePluginDisable?;
    string? creationMethod?;
    int ixUpdate?;
    string? templateGallery?;
    boolean enterpriseOwned?;
};

# Represents the Queries record for the operation: get-members-id-boards
public type GetMembersIdBoardsQueries record {
    # `all` or a comma-separated list of: `closed`, `members`, `open`, `organization`, `public`, `starred`
    "all"|"closed"|"members"|"open"|"organization"|"public"|"starred" filter = "all";
    # `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
    OrganizationFields organization_fields?;
    # Which lists to include with the boards. One of: `all`, `closed`, `none`, `open`
    "all"|"closed"|"none"|"open" lists = "none";
    # Whether to include the Organization object with the Boards
    boolean organization = false;
    # `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
    BoardFields fields?;
};

# Represents the Queries record for the operation: put-id-idboard
public type PutIdIdboardQueries record {
    # The ID of the board to move the list to
    TrelloID value;
};

public type Membership record {
    boolean managed?;
    boolean licensed?;
    boolean admin?;
    boolean deactivated?;
    boolean collaborator?;
    Membership_member member?;
};

public type id TrelloID|string;

public type CustomField_display_options record {
    TrelloID id?;
    TrelloID idCustomField?;
    CustomField_display_value value?;
    string color?;
    decimal pos?;
};

public type TransferrableOrganization record {
    boolean transferrable?;
    PendingOrganizations_transferability_newBillableMembers[] newBillableMembers?;
    PendingOrganizations_transferability_newBillableMembers[] restrictedMembers?;
};

public type Membership_member record {
    string id?;
    string fullname?;
    string username?;
    string dateLastImpression?;
    string email?;
    string initials?;
    string avatarURL?;
    string memberType?;
    boolean confirmed?;
};

# Represents the Queries record for the operation: put-cards-id-actions-idaction-comments
public type PutCardsIdActionsIdactionCommentsQueries record {
    # The new text for the comment
    string text;
};

# Represents the Queries record for the operation: get-enterprises-id-pendingOrganizations
public type GetEnterprisesIdPendingorganizationsQueries record {
    # Date in YYYY-MM-DD format indicating the date to search up to for activeness of workspace
    string activeSince?;
    # Date in YYYY-MM-DD format indicating the date to search up to for inactiveness of workspace
    string inactiveSince?;
};

# Represents the Queries record for the operation: notificationsidmember
public type NotificationsidmemberQueries record {
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    MemberFields fields?;
};

# Represents the Queries record for the operation: get-members-id-customstickers-idsticker
public type GetMembersIdCustomstickersIdstickerQueries record {
    # `all` or a comma-separated list of `scaled`, `url`
    "scaled"|"url"|"all" fields = "all";
};

public type AttachmentFields "id"|"bytes"|"date"|"edgeColor"|"idMember"|"isUpload"|"mimeType"|"name"|"previews"|"url"|"pos";

# Represents the Queries record for the operation: put-members-id-boardstars-idstar
public type PutMembersIdBoardstarsIdstarQueries record {
    # New position for the starred board. `top`, `bottom`, or a positive float.
    posStringOrNumber pos?;
};

# An object containing the key and value to set for the card's Custom Field value. The key used to set the value should match the type of Custom Field defined.
public type cardsidCardcustomFieldidCustomFielditem_value record {
    string text?;
    boolean checked?;
    string date?;
    decimal number?;
};

public type Card_descData record {
    record {} emoji?;
};

public type value_1 string|float|"top"|"bottom"|boolean;

public type Card record {
    TrelloID id?;
    string? address?;
    Card_badges badges?;
    (string)[] checkItemStates?;
    boolean closed?;
    string? coordinates?;
    string? creationMethod?;
    string dateLastActivity?;
    string desc?;
    Card_descData descData?;
    string? due?;
    string? dueReminder?;
    TrelloID idBoard?;
    (Checklist|TrelloID)[] idChecklists?;
    (Label|TrelloID)[] idLabels?;
    TrelloID idList?;
    (TrelloID)[] idMembers?;
    (TrelloID)[] idMembersVoted?;
    int idShort?;
    TrelloID idAttachmentCover?;
    (TrelloID)[] labels?;
    Limits limits?;
    string? locationName?;
    boolean manualCoverAttachment?;
    string name?;
    float pos?;
    string shortLink?;
    string shortUrl?;
    boolean subscribed?;
    string url?;
    Card_cover cover?;
};

public type CustomEmoji record {
    TrelloID id?;
    string url?;
    string name?;
};

# Represents the Queries record for the operation: get-actions-idaction-reactions
public type GetActionsIdactionReactionsQueries record {
    # Whether to load the emoji as a nested resource.
    boolean emoji = true;
    # Whether to load the member as a nested resource. See [Members Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#members-nested-resource)
    boolean member = true;
};

public type CheckItem record {
    TrelloID idChecklist?;
    "complete"|"incomplete" state?;
    TrelloID id?;
    string name?;
    string? nameData?;
    string pos?;
};

public type id_members_body record {
    # The full name of the user to as a member of the board. Must have a length of at least 1 and cannot begin nor end with a space.
    string fullName?;
};

# Represents the Queries record for the operation: get-cards-id-board
public type GetCardsIdBoardQueries record {
    # `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/#board-object)
    string fields = "all";
};

# Represents the Queries record for the operation: get-actions-idaction-reactions-id
public type GetActionsIdactionReactionsIdQueries record {
    # Whether to load the emoji as a nested resource.
    boolean emoji = true;
    # Whether to load the member as a nested resource. See [Members Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#members-nested-resource)
    boolean member = true;
};

# Represents the Queries record for the operation: get-organizations-id-memberships-idmembership
public type GetOrganizationsIdMembershipsIdmembershipQueries record {
    # Whether to include the Member object in the response
    boolean member = false;
};

# Provides API key configurations needed when communicating with a remote HTTP endpoint.
public type ApiKeysConfig record {|
    string 'key;
    string token;
|};

public type BlockedKey "notification_comment_card"|"notification_added_a_due_date"|"notification_changed_due_date"|"notification_card_due_soon"|"notification_removed_from_card"|"notification_added_attachment_to_card"|"notification_created_card"|"notification_moved_card"|"notification_archived_card"|"notification_unarchived_card";

public type Organization record {
    TrelloID id?;
};

public type BoardFields "id"|"name"|"desc"|"descData"|"closed"|"idMemberCreator"|"idOrganization"|"pinned"|"url"|"shortUrl"|"prefs"|"labelNames"|"starred"|"limits"|"memberships"|"enterpriseOwned";

# Represents the Queries record for the operation: put-organizations-id
public type PutOrganizationsIdQueries record {
    # A URL starting with `http://`, `https://`, or `null`
    string website?;
    # Whether non-workspace members can be added to boards inside the Workspace
    boolean prefs\/externalMembersDisabled?;
    # Whether the Workspace page is publicly visible. One of: `private`, `public`
    string prefs\/permissionLevel?;
    # A new displayName for the organization. Must be at least 1 character long and not begin or end with a space.
    string displayName?;
    # A new name for the organization. At least 3 lowercase letters, underscores, and numbers. Must be unique
    string name?;
    # Who can make private boards. One of: `admin`, `none`, `org`
    string prefs\/boardVisibilityRestrict\/private?;
    # The Google Apps domain to link this org to.
    string prefs\/associatedDomain?;
    # Who on the Workspace can make Workspace visible boards. One of `admin`, `none`, `org`
    string prefs\/boardVisibilityRestrict\/org?;
    # `1` or `2`
    int:Signed32 prefs\/googleAppsVersion?;
    # Who on the Workspace can make public boards. One of: `admin`, `none`, `org`
    string prefs\/boardVisibilityRestrict\/public?;
    # An email address with optional wildcard characters. (E.g. `subdomain.*.trello.com`)
    string prefs\/orgInviteRestrict?;
    # A new description for the organization
    string desc?;
};

# Represents the Queries record for the operation: get-users-id
public type GetUsersIdQueries record {
    # Returns members with email address or full name that start with the search value.
    string search = "none";
    # Cursor to return next set of results
    string startIndex = "none";
    # When true, returns members who possess a license for the corresponding Trello Enterprise; when false, returns members who do not. If unspecified, both licensed and unlicensed members will be returned.
    boolean licensed = false;
    # Returns only Trello users active since this date (inclusive).
    string activeSince = "none";
    # Returns only Trello users active since this date (inclusive).
    string inactiveSince = "none";
    # When true, returns members who are managed by the corresponding Trello Enterprise; when false, returns members who are not. If unspecified, both managed and unmanaged members will be returned.
    boolean managed = false;
    # When true, returns members who are administrators of the corresponding Trello Enterprise; when false, returns members who are not. If unspecified, both admin and non-admin members will be returned.
    boolean admin = false;
    # When true, returns members who have been deactivated for the corresponding Trello Enterprise; when false, returns members who have not. If unspecified, both active and deactivated members will be returned.
    boolean deactivated = false;
    # When true, returns members who are guests on one or more boards in the corresponding Trello Enterprise (but do not possess a license); when false, returns members who are not. If unspecified, both guests and non-guests will be returned.
    boolean collaborator = false;
};

# Represents the Queries record for the operation: put-boards-id-memberships-idmembership
public type PutBoardsIdMembershipsIdmembershipQueries record {
    # Valid values: all, avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username
    "all"|"avatarHash"|"bio"|"bioData"|"confirmed"|"fullName"|"idPremOrgsAdmin"|"initials"|"memberType"|"products"|"status"|"url"|"username" member_fields = "fullName, username";
    # One of: admin, normal, observer. Determines the type of member that this membership will be to this board.
    "admin"|"normal"|"observer" 'type;
};

# Represents the Queries record for the operation: get-actions-id
public type GetActionsIdQueries record {
    # 
    boolean entities = false;
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string member_fields = "avatarHash,fullName,initials,username";
    # 
    boolean display = true;
    # 
    boolean member = true;
    # Whether to include the member object for the creator of the action
    boolean memberCreator = true;
    # `all` or a comma-separated list of action [fields](/cloud/trello/guides/rest-api/object-definitions/#action-object)
    string fields = "all";
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string memberCreator_fields = "avatarHash,fullName,initials,username";
};

# Represents the Queries record for the operation: get-checklists-id-board
public type GetChecklistsIdBoardQueries record {
    # `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
    "all"|"name" fields = "all";
};

# Represents the Queries record for the operation: get-members-id-actions
public type GetMembersIdActionsQueries record {
    # A comma-separated list of [action types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/).
    string filter?;
};

# Represents the Queries record for the operation: put-enterprises-id-organizations
public type PutEnterprisesIdOrganizationsQueries record {
    # ID of Organization to be transferred to Enterprise.
    string idOrganization;
};

public type Card_badges record {
    Card_badges_attachmentsByType attachmentsByType?;
    boolean location?;
    int votes?;
    boolean viewingMemberVoted?;
    boolean subscribed?;
    string fogbugz?;
    int checkItems?;
    int checkItemsChecked?;
    int comments?;
    int attachments?;
    boolean description?;
    string? due?;
    string? 'start?;
    boolean dueComplete?;
};

# Represents the Queries record for the operation: get-enterprises-id-members-idmember
public type GetEnterprisesIdMembersIdmemberQueries record {
    # Any valid value that the [nested board resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
    string board_fields = "name";
    # Any valid value that the [nested organization field resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
    string organization_fields = "displayName";
    # A comma separated list of any valid values that the [nested member field resource]() accepts.
    string fields = "avatarHash, fullName, initials, username";
};

# Represents the Queries record for the operation: put-members-id
public type PutMembersIdQueries record {
    # New initials for the member. 1-4 characters long.
    @constraint:String {maxLength: 4, minLength: 1}
    string initials?;
    # 
    string prefs\/locale?;
    # New name for the member. Cannot begin or end with a space.
    string fullName?;
    # 
    string bio?;
    # One of: `gravatar`, `none`, `upload`
    "gravatar"|"none"|"upload" avatarSource?;
    # 
    boolean prefs\/colorBlind?;
    # `-1` for disabled, `1`, or `60`
    int:Signed32 prefs\/minutesBetweenSummaries?;
    # New username for the member. At least 3 characters long, only lowercase letters, underscores, and numbers. Must be unique.
    string username?;
};

# Represents the Queries record for the operation: put-boards-id-members-idmember
public type PutBoardsIdMembersIdmemberQueries record {
    # Optional param that allows organization admins to add multi-board guests onto a board.
    boolean allowBillableGuest = false;
    # One of: admin, normal, observer. Determines the type of member this user will be on the board.
    "admin"|"normal"|"observer" 'type;
};

# Represents the Queries record for the operation: post-cards-id-labels
public type PostCardsIdLabelsQueries record {
    # A valid label color or `null`. See [labels](/cloud/trello/guides/rest-api/object-definitions/)
    string color;
    # A name for the label
    string name?;
};

public type pos_3 float|"top"|"bottom";

# Represents the Queries record for the operation: get-lists-id
public type GetListsIdQueries record {
    # `all` or a comma separated list of List field names.
    string fields = "name,closed,idBoard,pos";
};

public type pos_1 "top"|"bottom"|float;

# Represents the Queries record for the operation: get-enterprises-id-members
public type GetEnterprisesIdMembersQueries record {
    # Pass a [SCIM-style query](/cloud/trello/scim/) to filter members. This takes precedence over the all/normal/admins value of members. If any of the below member_* args are set, the member array will be paginated.
    string? filter?;
    # Any valid value that the [nested board resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
    string board_fields = "name";
    # Any integer between 0 and 9999.
    @constraint:Int {minValue: 0, maxValue: 9999}
    int:Signed32 startIndex?;
    # Any valid value that the [nested organization field resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
    string organization_fields = "displayName";
    # Deprecated: Please use `sort` instead. One of: `ascending`, `descending`, `asc`, `desc`.
    "ascending"|"descending"|"asc"|"desc"? sortOrder?;
    # [SCIM-style filter](/cloud/trello/scim/).
    string count = "none";
    # Deprecated: Please use `sort` instead. This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting value. Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data.
    string sortBy?;
    # This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting value prefixed by a `-` to sort descending. If no `-` is prefixed, it will be sorted ascending. Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data.
    string sort?;
    # A comma-seperated list of valid [member fields](/cloud/trello/guides/rest-api/object-definitions/#member-object).
    string fields = "avatarHash, fullName, initials, username";
};

public type Export record {
    TrelloID id?;
    Export_status status?;
    string startedAt?;
    string? size?;
    string? exportUrl?;
};

public type pos_2 float|"top"|"bottom";

# Represents the Queries record for the operation: post-webhooks
public type PostWebhooksQueries record {
    # A string with a length from `0` to `16384`.
    @constraint:String {maxLength: 16384}
    string description?;
    # Determines whether the webhook is active and sending `POST` requests.
    boolean active?;
    # A valid URL that is reachable with a `HEAD` and `POST` request.
    string callbackURL;
    # ID of the model to be monitored
    TrelloID idModel;
};

# Represents the Queries record for the operation: put-organizations-id-members-idmember-deactivated
public type PutOrganizationsIdMembersIdmemberDeactivatedQueries record {
    # 
    boolean value;
};

# Represents the Queries record for the operation: post-members-id-boardbackgrounds-1
public type PostMembersIdBoardbackgrounds1Queries record {
    # 
    record {byte[] fileContent; string fileName;} file;
};

# Represents the Queries record for the operation: put-cards-id-stickers-idsticker
public type PutCardsIdStickersIdstickerQueries record {
    # The rotation of the sticker
    @constraint:Float {minValue: 0, maxValue: 360}
    float rotate = 0;
    # The top position of the sticker, from -60 to 100
    @constraint:Float {minValue: -60, maxValue: 100}
    float top;
    # The left position of the sticker, from -60 to 100
    @constraint:Float {minValue: -60, maxValue: 100}
    float left;
    # The z-index of the sticker
    int zIndex;
};

public type Action_data_list record {
    TrelloID id?;
    string name?;
};

# Represents the Queries record for the operation: post-members-id-onetimemessagesdismissed
public type PostMembersIdOnetimemessagesdismissedQueries record {
    # The message to dismiss
    TrelloID value;
};

public type PluginListing record {
    TrelloID id?;
    string name?;
    string locale?;
    string description?;
    string overview?;
};

# Represents the Queries record for the operation: post-members-id-boardstars
public type PostMembersIdBoardstarsQueries record {
    # The ID of the board to star
    TrelloID idBoard;
    # The position of the newly starred board. `top`, `bottom`, or a positive float.
    posStringOrNumber pos;
};

# Represents the Queries record for the operation: put-cards-id-checkitem-idcheckitem
public type PutCardsIdCheckitemIdcheckitemQueries record {
    # A dueReminder for the due date on the checkitem
    decimal? dueReminder?;
    # `top`, `bottom`, or a positive float
    posStringOrNumber pos?;
    # A due date for the checkitem
    string due?;
    # The ID of the checklist this item is in
    TrelloID idChecklist?;
    # The ID of the member to remove from the card
    TrelloID idMember?;
    # The new name for the checklist item
    string name?;
    # One of: `complete`, `incomplete`
    "complete"|"incomplete" state?;
};

public type EnterpriseAdmin record {
    TrelloID id?;
    string fullName?;
    string username?;
};

# Represents the Queries record for the operation: membersidcustomboardbackgrounds-1
public type Membersidcustomboardbackgrounds1Queries record {
    # 
    record {byte[] fileContent; string fileName;} file;
};

# Represents the Queries record for the operation: get-notifications-id-membercreator
public type GetNotificationsIdMembercreatorQueries record {
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    MemberFields fields?;
};

public type PendingOrganizations_transferability record {
    boolean transferrable?;
    PendingOrganizations_transferability_newBillableMembers[] newBillableMembers?;
    PendingOrganizations_transferability_newBillableMembers[] restrictedMembers?;
};

public type Enterprise record {
    TrelloID id?;
    string name?;
    string displayName?;
    string? logoHash?;
    string? logoUrl?;
    Enterprise_prefs prefs?;
    Enterprise_organizationPrefs organizationPrefs?;
    boolean ssoActivationFailed?;
    TrelloID[] idAdmins?;
    string[] enterpriseDomains?;
    boolean isRealEnterprise?;
    TrelloID[] pluginWhitelistingEnabled?;
    TrelloID[] idOrganizations?;
    decimal[] products?;
    Enterprise_licenses licenses?;
    string[] domains?;
    string dateOrganizationPrefsLastUpdated?;
    Enterprise_idp idp?;
};

public type Limits_attachments record {
    LimitsObject perBoard?;
};

public type Tag record {
    TrelloID id?;
    string name?;
};

public type idBoards "mine"|TrelloID;

# Represents the Queries record for the operation: put-notifications-id-unread
public type PutNotificationsIdUnreadQueries record {
    # 
    string value?;
};

public type Export_status record {
    decimal attempts?;
    boolean finished?;
    string stage?;
};

public type Emoji_trello record {
    string unified?;
    string name?;
    string native?;
    string shortName?;
    string[] shortNames?;
    string text?;
    string? texts?;
    string category?;
    decimal sheetX?;
    decimal sheetY?;
    string tts?;
    string[] keywords?;
};

# Represents the Queries record for the operation: post-members-id-customemoji
public type PostMembersIdCustomemojiQueries record {
    # 
    record {byte[] fileContent; string fileName;} file;
    # Name for the emoji. 2 - 64 characters
    @constraint:String {maxLength: 64, minLength: 2}
    string name;
};

public type CardAging "pirate"|"regular";

# Represents the Queries record for the operation: put-checlists-id
public type PutCheclistsIdQueries record {
    # Determines the position of the checklist on the card. One of: `top`, `bottom`, or a positive number.
    posStringOrNumber pos?;
    # Name of the new checklist being created. Should be length of 1 to 16384.
    string name?;
};

# Represents the Queries record for the operation: tokenstokenwebhooks-1
public type Tokenstokenwebhooks1Queries record {
    # A description to be displayed when retrieving information about the webhook.
    string description?;
    # The URL that the webhook should `POST` information to.
    string callbackURL?;
    # ID of the object that the webhook is on.
    TrelloID idModel?;
};

public type Limits record {
    Limits_attachments attachments?;
};

public type ViewFilter "all"|"closed"|"none"|"open";

public type Member record {
    TrelloID id?;
    boolean activityBlocked?;
    string avatarHash?;
    string avatarUrl?;
    string bio?;
    Card_descData bioData?;
    boolean confirmed?;
    string fullName?;
    TrelloID idEnterprise?;
    string[] idEnterprisesDeactivated?;
    TrelloID idMemberReferrer?;
    TrelloID[] idPremOrgsAdmin?;
    string initials?;
    "normal"|"ghost" memberType?;
    Member_nonPublic nonPublic?;
    # Whether the response contains non-public profile data for the member
    boolean nonPublicAvailable?;
    int[] products?;
    string url?;
    string username?;
    "disconnected" status?;
    string? aaEmail?;
    string? aaEnrolledDate?;
    string? aaId?;
    "gravatar"|"upload" avatarSource?;
    string email?;
    string gravatarHash?;
    TrelloID[] idBoards?;
    TrelloID[] idOrganizations?;
    TrelloID[] idEnterprisesAdmin?;
    LimitsObject limits?;
    ("password"|"saml")[] loginTypes?;
    Member_marketingOptIn marketingOptIn?;
    Member_messagesDismissed messagesDismissed?;
    string[] oneTimeMessagesDismissed?;
    MemberPrefs prefs?;
    string[] trophies?;
    string uploadedAvatarHash?;
    string uploadedAvatarUrl?;
    string[] premiumFeatures?;
    boolean isAaMastered?;
    decimal ixUpdate?;
    TrelloID[]? idBoardsPinned?;
};

# Represents the Queries record for the operation: get-boards-id-boardstars
public type GetBoardsIdBoardstarsQueries record {
    # Valid values: mine, none
    string filter = "mine";
};

# Represents the Queries record for the operation: put-members-id-customboardbackgrounds-idbackground
public type PutMembersIdCustomboardbackgroundsIdbackgroundQueries record {
    # One of: `dark`, `light`, `unknown`
    "dark"|"light"|"unknown" brightness?;
    # Whether to tile the background
    boolean tile?;
};

# Represents the Queries record for the operation: put-boards-id-myPrefs-showsidebarmembers
public type PutBoardsIdMyprefsShowsidebarmembersQueries record {
    # Determines whether to show members of the board in the sidebar.
    boolean value;
};

public type inline_response_200_5 TrelloList;

public type inline_response_200_6 Organization;

public type ClaimableOrganizations_organizations record {
    string name?;
    string displayName?;
    decimal activeMembershipCount?;
    TrelloID[] idActiveAdmins?;
    decimal[] products?;
    TrelloID id?;
    string? logoUrl?;
    # The date of the most recent activity on any of the boards in the workspace. If the workspace has no boards, or the boards have no activity, this value will be null.
    string? dateLastActive?;
};

public type inline_response_200_7 Memberships;

public type Channel "email";

public type inline_response_200_8 Tag;

public type BoardBackground record {
    TrelloID id?;
};

# Represents the Queries record for the operation: get-search
public type GetSearchQueries record {
    # all or a comma-separated list of: `badges`, `checkItemStates`, `closed`, `dateLastActivity`, `desc`, `descData`, `due`, `idAttachmentCover`, `idBoard`, `idChecklists`, `idLabels`, `idList`, `idMembers`, `idMembersVoted`, `idShort`, `labels`, `manualCoverAttachment`, `name`, `pos`, `shortLink`, `shortUrl`, `subscribed`, `url`
    string card_fields = "all";
    # Whether to include member objects with card results
    boolean card_members = false;
    # all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username
    string member_fields = "avatarHash,fullName,initials,username,confirmed";
    # The search query with a length of 1 to 16384 characters
    @constraint:String {maxLength: 16834, minLength: 1}
    string query;
    # Whether to include the parent board with card results
    boolean card_board = false;
    # Whether to include the parent list with card results
    boolean card_list = false;
    # Whether to include the parent organization with board results
    boolean board_organization = false;
    # What type or types of Trello objects you want to search. all or a comma-separated list of: `actions`, `boards`, `cards`, `members`, `organizations`
    string modelTypes = "all";
    # The maximum number of boards returned. Maximum: 1000
    @constraint:Int {maxValue: 1000}
    int boards_limit = 10;
    # all or a comma-separated list of: `closed`, `dateLastActivity`, `dateLastView`, `desc`, `descData`, `idOrganization`, `invitations`, `invited`, `labelNames`, `memberships`, `name`, `pinned`, `powerUps`, `prefs`, `shortLink`, `shortUrl`, `starred`, `subscribed`, `url`
    string board_fields = "name,idOrganization";
    # Whether to include sticker objects with card results
    boolean card_stickers = false;
    # all or a comma-separated list of billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url, website
    string organization_fields = "name,displayName";
    # The maximum number of Workspaces to return. Maximum 1000
    int:Signed32 organizations_limit?;
    # A comma-separated list of Card IDs
    string idCards?;
    # The maximum number of members to return. Maximum 1000
    int:Signed32 members_limit?;
    # `mine` or a comma-separated list of Board IDs
    idBoards idBoards?;
    # A comma-separated list of Organization IDs
    string idOrganizations?;
    # The page of results for cards. Maximum: 100
    @constraint:Number {maxValue: 100}
    decimal cards_page = 0;
    # By default, Trello searches for each word in your query against exactly matching words within Member content. Specifying partial to be true means that we will look for content that starts with any of the words in your query.  If you are looking for a Card titled "My Development Status Report", by default you would need to search for "Development". If you have partial enabled, you will be able to search for "dev" but not "velopment".
    boolean partial = false;
    # The maximum number of cards to return. Maximum: 1000
    @constraint:Int {maxValue: 1000}
    int cards_limit = 10;
    # Whether to include attachment objects with card results. A boolean value (true or false) or cover for only card cover attachments.
    string card_attachments = "false";
};

# Represents the Queries record for the operation: get-members-id-boardbackgrounds-idbackground
public type GetMembersIdBoardbackgroundsIdbackgroundQueries record {
    # `all` or a comma-separated list of: `brightness`, `fullSizeUrl`, `scaled`, `tile`
    "all"|"brightness"|"fullSizeUrl"|"scaled"|"tile" fields = "all";
};

public type TokenPermission record {
    TrelloID|"*" idModel?;
    "board"|"member"|"organization"|"enterprise" modelType?;
    boolean read?;
    boolean write?;
};

public type Member_messagesDismissed record {
    string name?;
    string count?;
    string lastDismissed?;
    TrelloID _id?;
};

public type inline_response_200_1 Member;

public type inline_response_200_2 Notification;

public type idCustomField_item_body record {cardsidCardcustomFieldidCustomFielditem_value value?;}|record {TrelloID idValue?;};

# Represents the Queries record for the operation: post-organizations-id-logo
public type PostOrganizationsIdLogoQueries record {
    # Image file for the logo
    record {byte[] fileContent; string fileName;} file?;
};

public type inline_response_200_3 Board;

public type inline_response_200_4 Card;

# Represents the Queries record for the operation: get-cards-id-checkitem-idcheckitem
public type GetCardsIdCheckitemIdcheckitemQueries record {
    # `all` or a comma-separated list of `name,nameData,pos,state,type,due,dueReminder,idMember`
    string fields = "name,nameData,pos,state,due,dueReminder,idMember";
};

# Represents the Queries record for the operation: put-notifications-id
public type PutNotificationsIdQueries record {
    # Whether the notification should be marked as read or not
    boolean unread?;
};

# 
public type Memberships record {
    TrelloID id?;
};

public type idPlugin_listing_body record {
    # The description to show for the given locale
    string description?;
    # The locale that this listing should be displayed for.
    string locale?;
    # The overview to show for the given locale.
    string overview?;
    # The name to use for the given locale.
    string name?;
};

@constraint:String {pattern: re `^[0-9a-fA-F]{24}$`}
public type TrelloID string;

# Represents the Queries record for the operation: get-cards-id-membersvoted
public type GetCardsIdMembersvotedQueries record {
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "avatarHash,fullName,initials,username";
};

# Represents the Queries record for the operation: put-boards-id-myPrefs-showsidebarboardactions
public type PutBoardsIdMyprefsShowsidebarboardactionsQueries record {
    # Determines whether to show the sidebar board actions.
    boolean value;
};

# Represents the Queries record for the operation: get-boards-id
public type GetBoardsIdQueries record {
    # This is a nested resource. Read more about checklists as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
    string checklists = "none";
    # This is a nested resource. Read more about cards as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
    string cards = "none";
    # This is a nested resource. Read more about custom fields as nested resources [here](#custom-fields-nested-resource).
    boolean customFields = false;
    # Use with the `cards` param to include card pluginData with the response
    boolean card_pluginData = false;
    # This is a nested resource. Read more about memberships as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
    string memberships = "none";
    # This is a nested resource. Read more about labels as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
    string labels?;
    # Also known as collections, tags, refer to the collection(s) that a Board belongs to.
    boolean tags = false;
    # Valid values are one of: `mine` or `none`.
    string boardStars = "none";
    # This is a nested resource. Read more about lists as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
    string lists = "open";
    # This is a nested resource. Read more about members as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
    string members = "none";
    # This is a nested resource. Read more about organizations as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
    boolean organization = false;
    # Use with the `organization` param to include organization pluginData with the response
    boolean organization_pluginData = false;
    # Determines whether the pluginData for this board should be returned. Valid values: true or false.
    boolean pluginData = false;
    # 
    boolean myPrefs = false;
    # The fields of the board to be included in the response. Valid values: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idMemberCreator, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url
    string fields = "name,desc,descData,closed,idOrganization,pinned,url,shortUrl,prefs,labelNames";
    # This is a nested resource. Read more about actions as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
    string actions = "all";
};

# Represents the Queries record for the operation: get-notifications-id-board
public type GetNotificationsIdBoardQueries record {
    # `all` or a comma-separated list of board[fields](/cloud/trello/guides/rest-api/object-definitions/)
    BoardFields fields?;
};

public type PendingOrganizations_transferability_newBillableMembers record {
    TrelloID id?;
    string fullName?;
    string username?;
    string initials?;
    string avatarHash?;
};

# Represents the Queries record for the operation: post-boards-id-idtags
public type PostBoardsIdIdtagsQueries record {
    # The id of a tag from the organization to which this board belongs.
    TrelloID value;
};

# Represents the Queries record for the operation: post-lists-id-moveallcards
public type PostListsIdMoveallcardsQueries record {
    # The ID of the board the cards should be moved to
    TrelloID idBoard;
    # The ID of the list that the cards should be moved to
    TrelloID idList;
};

# Represents the Queries record for the operation: put-members-id-savedsearches-idsearch
public type PutMembersIdSavedsearchesIdsearchQueries record {
    # New position for saves search. `top`, `bottom`, or a positive float.
    string pos?;
    # The new search query
    string query?;
    # The new name for the saved search
    string name?;
};

public type Card_badges_attachmentsByType_trello record {
    decimal board?;
    decimal card?;
};

# Represents the Queries record for the operation: get-cards-id-actions
public type GetCardsIdActionsQueries record {
    # A comma-separated list of [action types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/).
    string filter = "commentCard, updateCard:idList";
    # The page of results for actions. Each page of results has 50 actions.
    @constraint:Number {maxValue: 19}
    decimal page = 0;
};

public type Member_marketingOptIn record {
    boolean optedIn?;
    string date?;
};

# Represents the Queries record for the operation: get-actions-id-membercreator
public type GetActionsIdMembercreatorQueries record {
    # `all` or a comma-separated list of member fields
    MemberFields fields?;
};

# Represents the Queries record for the operation: put-enterprises-id-enterpriseJoinRequest-bulk
public type PutEnterprisesIdEnterprisejoinrequestBulkQueries record {
    # An array of IDs of an Organization resource.
    (Organization)[] idOrganizations;
};

public type Board_labelNames record {
    string green?;
    string yellow?;
    string orange?;
    string red?;
    string purple?;
    string blue?;
    string sky?;
    string lime?;
    string pink?;
    string black?;
};

# Represents the Queries record for the operation: put-boards-id-myprefs-idemaillist
public type PutBoardsIdMyprefsIdemaillistQueries record {
    # The id of an email list.
    TrelloID value;
};

public type Enterprise_idp record {
    boolean requestSigned?;
    string? certificate?;
    string? loginUrl?;
};

# Represents the Queries record for the operation: get-tokens-token-member
public type GetTokensTokenMemberQueries record {
    # `all` or a comma-separated list of valid fields for [Member Object](/cloud/trello/guides/rest-api/object-definitions/).
    MemberFields fields?;
};

public type inline_response_200 record {
    string signupUrl?;
};

public type Emoji record {
    Emoji_trello[] trello?;
};

public type BoardStars record {
    TrelloID id?;
    TrelloID idBoard?;
    int pos?;
};

public type ClaimableOrganizations record {
    ClaimableOrganizations_organizations[] organizations?;
    decimal claimableCount?;
};

public type value posStringOrNumber|TrelloID;

public type id_notificationsChannelSettings_body record {
    Channel channel;
    # Blocked key or array of blocked keys.
    BlockedKey|BlockedKey[] blockedKeys;
};

# Represents the Queries record for the operation: get-boards-id-actions
public type GetBoardsIdActionsQueries record {
    # A date string in the form of YYYY-MM-DDThh:mm:ssZ or a mongo object ID. Only objects created before this date will be returned.
    string before?;
    # The fields of the [member](/cloud/trello/guides/rest-api/object-definitions/#member-object) to return.
    string member_fields = "activityBlocked,avatarHash,avatarUrl,fullName,idMemberReferrer,initials,nonPublic,nonPublicAvailable,username";
    # The format of the returned Actions. Either list or count.
    string format = "list";
    # A comma-separated list of [action types](/cloud/trello/guides/rest-api/action-types/).
    string filter?;
    # The limit of the number of responses, between 0 and 1000.
    decimal 'limit = 50;
    # Whether to return the member object for each action.
    boolean member = true;
    # Whether to return the memberCreator object for each action.
    boolean memberCreator = true;
    # Whether to show reactions on comments or not.
    boolean reactions?;
    # The page of results for actions.
    decimal page = 0;
    # The fields to be returned for the Actions. [See Action fields here](/cloud/trello/guides/rest-api/object-definitions/#action-object).
    Action fields?;
    # The fields of the [member](/cloud/trello/guides/rest-api/object-definitions/#member-object) creator to return
    string memberCreator_fields = "activityBlocked,avatarHash,avatarUrl,fullName,idMemberReferrer,initials,nonPublic,nonPublicAvailable,username";
    # A comma-separated list of idModels. Only actions related to these models will be returned.
    string idModels?;
    # A date string in the form of YYYY-MM-DDThh:mm:ssZ or a mongo object ID. Only objects created since this date will be returned.
    string since?;
};

# Represents the Queries record for the operation: get-cards-id-attachments-idattachment
public type GetCardsIdAttachmentsIdattachmentQueries record {
    # The Attachment fields to be included in the response.
    (AttachmentFields)[] fields = ["all"];
};

# Represents the Queries record for the operation: get-organizations-id-boards
public type GetOrganizationsIdBoardsQueries record {
    # `all` or a comma-separated list of: `open`, `closed`, `members`, `organization`, `public`
    "all"|"open"|"closed"|"members"|"organization"|"public" filter = "all";
    # `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
    BoardFields fields?;
};

# An object containing information regarding the card's cover 
#  `brightness` can be sent alongside any of the other parameters, but all of the other parameters are mutually exclusive; you can not have the cover be a color and an `idAttachment` at the same time.
public type cardsid_value record {
    # One of: `pink, yellow, lime, blue, black, orange, red, purple, sky, green`
    "pink"|"yellow"|"lime"|"blue"|"black"|"orange"|"red"|"purple"|"sky"|"green" color?;
    # Determines whether the text on the cover should be dark or light. Setting it to `light` will make the text on the card cover dark. And vice versa, setting it to dark will make the text on the card cover light
    "dark"|"light" brightness?;
    # Used if making an image the cover. Only Unsplash URLs (https://images.unsplash.com/) work.
    string url?;
};

public type idMember string|TrelloID;

# Represents the Queries record for the operation: post-cards-id-idmembers
public type PostCardsIdIdmembersQueries record {
    # The ID of the Member to add to the card
    TrelloID value?;
};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

# Represents the Queries record for the operation: post-labels
public type PostLabelsQueries record {
    # The ID of the Board to create the Label on.
    string idBoard;
    # The color for the label.
    Color? color;
    # Name for the label
    string name;
};

public type CustomSticker record {
    TrelloID id?;
    string url?;
    CustomSticker_scaled[] scaled?;
};

public type CustomField record {
    TrelloID id?;
    string idModel?;
    "card"|"board"|"member" modelType?;
    string fieldGroup?;
    CustomField_display display?;
    string 'type?;
};

public type idMember_1 TrelloID|string;

public type MemberFields "id";

# Represents the Queries record for the operation: get-actions-id-board
public type GetActionsIdBoardQueries record {
    # `all` or a comma-separated list of board fields
    BoardFields fields?;
};

# Represents the Queries record for the operation: post-boards-id-labels
public type PostBoardsIdLabelsQueries record {
    # Sets the color of the new label. Valid values are a label color or `null`.
    string color;
    # The name of the label to be created. 1 to 16384 characters long.
    string name;
};

public type Plugin record {
    TrelloID id?;
};
