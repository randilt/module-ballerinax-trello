// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

public isolated client class Client {
    final http:Client clientEp;
    final readonly & ApiKeysConfig apiKeyConfig;
    # Gets invoked to initialize the `connector`.
    #
    # + apiKeyConfig - API keys for authorization 
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ApiKeysConfig apiKeyConfig, ConnectionConfig config =  {}, string serviceUrl = "https://api.trello.com/1") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        self.apiKeyConfig = apiKeyConfig.cloneReadOnly();
        return;
    }

    # Delete Action's Reaction
    #
    # + idAction - The ID of the Action
    # + id - The ID of the reaction
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete actions/[TrelloID idAction]/reactions/[TrelloID id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/actions/${getEncodedUri(idAction)}/reactions/${getEncodedUri(id)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete an Action
    #
    # + id - The ID of the Action
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete actions/[TrelloID id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/actions/${getEncodedUri(id)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Disable a Power-Up on a Board
    #
    # + id - The ID of the board
    # + idPlugin - The ID of the Power-Up to disable
    # + headers - Headers to be sent with the request 
    # + return - Success 
    # 
    # # Deprecated
    @deprecated
    resource isolated function delete boards/[TrelloID id]/boardPlugins/[TrelloID idPlugin](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/boardPlugins/${getEncodedUri(idPlugin)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Remove Member from Board
    #
    # + id - The id of the board to update
    # + idMember - The id of the member to add to the board.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete boards/[TrelloID id]/members/[TrelloID idMember](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/members/${getEncodedUri(idMember)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete a Board
    #
    # + id - The id of the board to delete
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete boards/[string id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete cards/[TrelloID id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete a comment on a Card
    #
    # + id - The ID of the Card
    # + idAction - The ID of the comment action to update
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete cards/[TrelloID id]/actions/[TrelloID idAction]/comments(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/actions/${getEncodedUri(idAction)}/comments`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete an Attachment on a Card
    #
    # + id - The ID of the Card
    # + idAttachment - The ID of the attachment to delete
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete cards/[TrelloID id]/attachments/[TrelloID idAttachment](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/attachments/${getEncodedUri(idAttachment)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete checkItem on a Card
    #
    # + id - The ID of the Card
    # + idCheckItem - The ID of the checkitem
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete cards/[TrelloID id]/checkItem/[TrelloID idCheckItem](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/checkItem/${getEncodedUri(idCheckItem)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete a Checklist on a Card
    #
    # + id - The ID of the Card
    # + idChecklist - The ID of the checklist to delete
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete cards/[TrelloID id]/checklists/[TrelloID idChecklist](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/checklists/${getEncodedUri(idChecklist)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Remove a Label from a Card
    #
    # + id - The ID of the Card
    # + idLabel - The ID of the label to remove
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete cards/[TrelloID id]/idLabels/[TrelloID idLabel](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/idLabels/${getEncodedUri(idLabel)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Remove a Member from a Card
    #
    # + id - The ID of the Card
    # + idMember - The ID of the member to remove from the card
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete cards/[TrelloID id]/idMembers/[TrelloID idMember](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/idMembers/${getEncodedUri(idMember)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Remove a Member's Vote on a Card
    #
    # + id - The ID of the Card
    # + idMember - The ID of the member whose vote to remove
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete cards/[TrelloID id]/membersVoted/[TrelloID idMember](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/membersVoted/${getEncodedUri(idMember)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete a Sticker on a Card
    #
    # + id - The ID of the Card
    # + idSticker - The ID of the sticker
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete cards/[TrelloID id]/stickers/[TrelloID idSticker](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/stickers/${getEncodedUri(idSticker)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete a Checklist
    #
    # + id - ID of a checklist.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete checklists/[TrelloID id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/checklists/${getEncodedUri(id)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete Checkitem from Checklist
    #
    # + id - ID of a checklist.
    # + idCheckItem - ID of the check item to retrieve.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete checklists/[TrelloID id]/checkItems/[TrelloID idCheckItem](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/checklists/${getEncodedUri(id)}/checkItems/${getEncodedUri(idCheckItem)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete a Custom Field definition
    #
    # + id - ID of the Custom Field.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete customFields/[TrelloID id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/customFields/${getEncodedUri(id)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete Option of Custom Field dropdown
    #
    # + id - ID of the customfielditem.
    # + idCustomFieldOption - ID of the customfieldoption to retrieve.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete customFields/[TrelloID id]/options/[TrelloID idCustomFieldOption](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/customFields/${getEncodedUri(id)}/options/${getEncodedUri(idCustomFieldOption)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Remove a Member as admin from Enterprise.
    #
    # + id - ID of the Enterprise to retrieve.
    # + idMember - ID of the member to be removed as an admin from enterprise.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete enterprises/[TrelloID id]/admins/[TrelloID idMember](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/enterprises/${getEncodedUri(id)}/admins/${getEncodedUri(idMember)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete an Organization from an Enterprise.
    #
    # + id - ID of the enterprise to retrieve.
    # + idOrg - ID of the organization to be removed from the enterprise.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete enterprises/[TrelloID id]/organizations/[TrelloID idOrg](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/enterprises/${getEncodedUri(id)}/organizations/${getEncodedUri(idOrg)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete a Label
    #
    # + id - The ID of the Label
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete labels/[TrelloID id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/labels/${getEncodedUri(id)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete a Member's custom Board background
    #
    # + id - The ID or username of the member
    # + idBackground - The ID of the board background
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete members/[TrelloID id]/boardBackgrounds/[TrelloID idBackground](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/members/${getEncodedUri(id)}/boardBackgrounds/${getEncodedUri(idBackground)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete Star for Board
    #
    # + id - The ID or username of the member
    # + idStar - The ID of the board star
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete members/[TrelloID id]/boardStars/[TrelloID idStar](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/members/${getEncodedUri(id)}/boardStars/${getEncodedUri(idStar)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete a Member's custom Sticker
    #
    # + id - The ID or username of the member
    # + idSticker - The ID of the uploaded sticker
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete members/[TrelloID id]/customStickers/[TrelloID idSticker](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/members/${getEncodedUri(id)}/customStickers/${getEncodedUri(idSticker)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete custom Board Background of Member
    #
    # + id - The ID or username of the member
    # + idBackground - The ID of the custom background
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete members/[id_2 id]/customBoardBackgrounds/[TrelloID idBackground](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/members/${getEncodedUri(id)}/customBoardBackgrounds/${getEncodedUri(idBackground)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete a saved search
    #
    # + id - The ID or username of the member
    # + idSearch - The ID of the saved search to delete
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete members/[string id]/savedSearches/[string idSearch](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/members/${getEncodedUri(id)}/savedSearches/${getEncodedUri(idSearch)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete an Organization
    #
    # + id - The ID or name of the Organization
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete organizations/[TrelloID id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/organizations/${getEncodedUri(id)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete Logo for Organization
    #
    # + id - The ID or name of the organization
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete organizations/[TrelloID id]/logo(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/logo`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Remove a Member from an Organization and all Organization Boards
    #
    # + id - The ID or name of the organization
    # + idMember - The ID of the member to remove from the Workspace
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete organizations/[TrelloID id]/members/[TrelloID idMember]/all(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/members/${getEncodedUri(idMember)}/all`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Remove the associated Google Apps domain from a Workspace
    #
    # + id - The ID or name of the organization
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete organizations/[TrelloID id]/prefs/associatedDomain(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/prefs/associatedDomain`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete the email domain restriction on who can be invited to the Workspace
    #
    # + id - The ID or name of the organization
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete organizations/[TrelloID id]/prefs/orgInviteRestrict(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/prefs/orgInviteRestrict`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Remove a Member from an Organization
    #
    # + id - The ID or name of the organization
    # + idMember - The ID of the Member to remove from the Workspace
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete organizations/[id_7 id]/members/[TrelloID idMember](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/members/${getEncodedUri(idMember)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete an Organization's Tag
    #
    # + id - The ID or name of the organization
    # + idTag - The ID of the tag to delete
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete organizations/[string id]/tags/[string idTag](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/tags/${getEncodedUri(idTag)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    resource isolated function delete tokens/[string token](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/tokens/${getEncodedUri(token)}/`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete a Webhook created by Token
    #
    # + token -
    # + idWebhook - ID of the [Webhooks](ref:webhooks) to retrieve.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete tokens/[string token]/webhooks/[TrelloID idWebhook](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/tokens/${getEncodedUri(token)}/webhooks/${getEncodedUri(idWebhook)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete a Webhook
    #
    # + id - ID of the webhook to retrieve.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function delete webhooks/[TrelloID id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/webhooks/${getEncodedUri(id)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get Action's Reactions
    #
    # + idAction - The ID of the action
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get actions/[TrelloID idAction]/reactions(map<string|string[]> headers = {}, *GetActionsIdactionReactionsQueries queries) returns error? {
        string resourcePath = string `/actions/${getEncodedUri(idAction)}/reactions`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Action's Reaction
    #
    # + idAction - The ID of the Action
    # + id - The ID of the reaction
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get actions/[TrelloID idAction]/reactions/[TrelloID id](map<string|string[]> headers = {}, *GetActionsIdactionReactionsIdQueries queries) returns error? {
        string resourcePath = string `/actions/${getEncodedUri(idAction)}/reactions/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # List Action's summary of Reactions
    #
    # + idAction - The ID of the action
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get actions/[TrelloID idAction]/reactionsSummary(map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/actions/${getEncodedUri(idAction)}/reactionsSummary`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get an Action
    #
    # + id - The ID of the Action
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get actions/[TrelloID id](map<string|string[]> headers = {}, *GetActionsIdQueries queries) returns Action|error {
        string resourcePath = string `/actions/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a specific field on an Action
    #
    # + id - The ID of the Action
    # + 'field - An action field
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get actions/[TrelloID id]/[ActionFields 'field](map<string|string[]> headers = {}) returns Action|error {
        string resourcePath = string `/actions/${getEncodedUri(id)}/${getEncodedUri('field)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the Board for an Action
    #
    # + id - The ID of the action
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get actions/[TrelloID id]/board(map<string|string[]> headers = {}, *GetActionsIdBoardQueries queries) returns Board|error {
        string resourcePath = string `/actions/${getEncodedUri(id)}/board`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the Card for an Action
    #
    # + id - The ID of the action
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get actions/[TrelloID id]/card(map<string|string[]> headers = {}, *GetActionsIdCardQueries queries) returns Card|error {
        string resourcePath = string `/actions/${getEncodedUri(id)}/card`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the List for an Action
    #
    # + id - The ID of the action
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get actions/[TrelloID id]/list(map<string|string[]> headers = {}, *GetActionsIdListQueries queries) returns TrelloList|error {
        string resourcePath = string `/actions/${getEncodedUri(id)}/list`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the Member of an Action
    #
    # + id - The ID of the Action
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get actions/[TrelloID id]/member(map<string|string[]> headers = {}, *GetActionsIdMemberQueries queries) returns Member|error {
        string resourcePath = string `/actions/${getEncodedUri(id)}/member`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the Member Creator of an Action
    #
    # + id - The ID of the Action
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get actions/[TrelloID id]/memberCreator(map<string|string[]> headers = {}, *GetActionsIdMembercreatorQueries queries) returns Member|error {
        string resourcePath = string `/actions/${getEncodedUri(id)}/memberCreator`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the Organization of an Action
    #
    # + id - The ID of the action
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get actions/[TrelloID id]/organization(map<string|string[]> headers = {}, *GetActionsIdOrganizationQueries queries) returns Organization|error {
        string resourcePath = string `/actions/${getEncodedUri(id)}/organization`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Application's compliance data
    #
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get applications/[string 'key]/compliance(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/applications/${getEncodedUri('key)}/compliance`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Batch Requests
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get batch(map<string|string[]> headers = {}, *GetBatchQueries queries) returns error? {
        string resourcePath = string `/batch`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Board
    #
    # + id -
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get boards/[TrelloID id](map<string|string[]> headers = {}, *GetBoardsIdQueries queries) returns Board|error {
        string resourcePath = string `/boards/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Enabled Power-Ups on Board
    #
    # + id - The ID of the Board
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get boards/[TrelloID id]/boardPlugins(map<string|string[]> headers = {}) returns Plugin[]|error {
        string resourcePath = string `/boards/${getEncodedUri(id)}/boardPlugins`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Custom Fields for Board
    #
    # + id - The ID of the board
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get boards/[TrelloID id]/customFields(map<string|string[]> headers = {}) returns CustomField[]|error {
        string resourcePath = string `/boards/${getEncodedUri(id)}/customFields`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Labels on a Board
    #
    # + id - The ID of the Board.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get boards/[TrelloID id]/labels(map<string|string[]> headers = {}, *GetBoardsIdLabelsQueries queries) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/labels`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"fields": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Lists on a Board
    #
    # + id - The ID of the board
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get boards/[TrelloID id]/lists(map<string|string[]> headers = {}, *GetBoardsIdListsQueries queries) returns TrelloList[]|error {
        string resourcePath = string `/boards/${getEncodedUri(id)}/lists`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get filtered Lists on a Board
    #
    # + id - The ID of the board
    # + filter - One of `all`, `closed`, `none`, `open`
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get boards/[TrelloID id]/lists/[ViewFilter filter](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/lists/${getEncodedUri(filter)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the Members of a Board
    #
    # + id - The ID of the board
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get boards/[TrelloID id]/members(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/members`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Memberships of a Board
    #
    # + id - The ID of the board
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get boards/[TrelloID id]/memberships(map<string|string[]> headers = {}, *GetBoardsIdMembershipsQueries queries) returns Memberships|error {
        string resourcePath = string `/boards/${getEncodedUri(id)}/memberships`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Power-Ups on a Board
    #
    # + id - The ID of the board
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get boards/[TrelloID id]/plugins(map<string|string[]> headers = {}, *GetBoardIdPluginsQueries queries) returns Plugin|error {
        string resourcePath = string `/boards/${getEncodedUri(id)}/plugins`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Actions of a Board
    #
    # + boardId -
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get boards/[string boardId]/actions(map<string|string[]> headers = {}, *GetBoardsIdActionsQueries queries) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(boardId)}/actions`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"fields": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get boardStars on a Board
    #
    # + boardId -
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get boards/[string boardId]/boardStars(map<string|string[]> headers = {}, *GetBoardsIdBoardstarsQueries queries) returns BoardStars[]|error {
        string resourcePath = string `/boards/${getEncodedUri(boardId)}/boardStars`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a field on a Board
    #
    # + id - The ID of the board.
    # + 'field - The field you'd like to receive. Valid values: closed, dateLastActivity, dateLastView, desc, descData, idMemberCreator, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get boards/[string id]/[string 'field](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/${getEncodedUri('field)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Cards on a Board
    #
    # + id -
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get boards/[string id]/cards(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/cards`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get filtered Cards on a Board
    #
    # + id - ID of the Board
    # + filter - Valid Values: all, closed, none, open, visible.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get boards/[string id]/cards/["all"|"closed"|"none"|"open"|"visible" filter](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/cards/${getEncodedUri(filter)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Checklists on a Board
    #
    # + id - The ID of the board
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get boards/[string id]/checklists(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/checklists`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get cards/[TrelloID id](map<string|string[]> headers = {}, *GetCardsIdQueries queries) returns Card|error {
        string resourcePath = string `/cards/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"attachments": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a field on a Card
    #
    # + id - The ID of the Card
    # + 'field - The desired field.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get cards/[TrelloID id]/[CardFields 'field](map<string|string[]> headers = {}) returns Card|error {
        string resourcePath = string `/cards/${getEncodedUri(id)}/${getEncodedUri('field)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Actions on a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get cards/[TrelloID id]/actions(map<string|string[]> headers = {}, *GetCardsIdActionsQueries queries) returns Action[]|error {
        string resourcePath = string `/cards/${getEncodedUri(id)}/actions`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Attachments on a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get cards/[TrelloID id]/attachments(map<string|string[]> headers = {}, *GetCardsIdAttachmentsQueries queries) returns Attachment[]|error {
        string resourcePath = string `/cards/${getEncodedUri(id)}/attachments`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get an Attachment on a Card
    #
    # + id - The ID of the Card
    # + idAttachment - The ID of the Attachment
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get cards/[TrelloID id]/attachments/[TrelloID idAttachment](map<string|string[]> headers = {}, *GetCardsIdAttachmentsIdattachmentQueries queries) returns Attachment[]|error {
        string resourcePath = string `/cards/${getEncodedUri(id)}/attachments/${getEncodedUri(idAttachment)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the Board the Card is on
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get cards/[TrelloID id]/board(map<string|string[]> headers = {}, *GetCardsIdBoardQueries queries) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/board`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get checkItem on a Card
    #
    # + id - The ID of the Card
    # + idCheckItem - The ID of the checkitem
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get cards/[TrelloID id]/checkItem/[TrelloID idCheckItem](map<string|string[]> headers = {}, *GetCardsIdCheckitemIdcheckitemQueries queries) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/checkItem/${getEncodedUri(idCheckItem)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get checkItems on a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get cards/[TrelloID id]/checkItemStates(map<string|string[]> headers = {}, *GetCardsIdCheckitemstatesQueries queries) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/checkItemStates`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Checklists on a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get cards/[TrelloID id]/checklists(map<string|string[]> headers = {}, *GetCardsIdChecklistsQueries queries) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/checklists`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Custom Field Items for a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get cards/[TrelloID id]/customFieldItems(map<string|string[]> headers = {}) returns CustomFieldItems[]|error {
        string resourcePath = string `/cards/${getEncodedUri(id)}/customFieldItems`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the List of a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get cards/[TrelloID id]/list(map<string|string[]> headers = {}, *GetCardsIdListQueries queries) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/list`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the Members of a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get cards/[TrelloID id]/members(map<string|string[]> headers = {}, *GetCardsIdMembersQueries queries) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/members`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Members who have voted on a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get cards/[TrelloID id]/membersVoted(map<string|string[]> headers = {}, *GetCardsIdMembersvotedQueries queries) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/membersVoted`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get pluginData on a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get cards/[TrelloID id]/pluginData(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/pluginData`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Stickers on a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get cards/[TrelloID id]/stickers(map<string|string[]> headers = {}, *GetCardsIdStickersQueries queries) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/stickers`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Sticker on a Card
    #
    # + id - The ID of the Card
    # + idSticker - The ID of the sticker
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get cards/[TrelloID id]/stickers/[TrelloID idSticker](map<string|string[]> headers = {}, *GetCardsIdStickersIdstickerQueries queries) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/stickers/${getEncodedUri(idSticker)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Checklist
    #
    # + id - ID of a checklist.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get checklists/[TrelloID id](map<string|string[]> headers = {}, *GetChecklistsIdQueries queries) returns error? {
        string resourcePath = string `/checklists/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get field on a Checklist
    #
    # + id - ID of a checklist.
    # + 'field - Field to update.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get checklists/[TrelloID id]/["name"|"pos" 'field](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/checklists/${getEncodedUri(id)}/${getEncodedUri('field)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the Board the Checklist is on
    #
    # + id - ID of a checklist.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get checklists/[TrelloID id]/board(map<string|string[]> headers = {}, *GetChecklistsIdBoardQueries queries) returns error? {
        string resourcePath = string `/checklists/${getEncodedUri(id)}/board`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the Card a Checklist is on
    #
    # + id - ID of a checklist.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get checklists/[TrelloID id]/cards(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/checklists/${getEncodedUri(id)}/cards`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Checkitems on a Checklist
    #
    # + id - ID of a checklist.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get checklists/[TrelloID id]/checkItems(map<string|string[]> headers = {}, *GetChecklistsIdCheckitemsQueries queries) returns error? {
        string resourcePath = string `/checklists/${getEncodedUri(id)}/checkItems`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Checkitem on a Checklist
    #
    # + id - ID of a checklist.
    # + idCheckItem - ID of the check item to retrieve.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get checklists/[TrelloID id]/checkItems/[TrelloID idCheckItem](map<string|string[]> headers = {}, *GetChecklistsIdCheckitemsIdcheckitemQueries queries) returns error? {
        string resourcePath = string `/checklists/${getEncodedUri(id)}/checkItems/${getEncodedUri(idCheckItem)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Custom Field
    #
    # + id - ID of the Custom Field.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get customFields/[TrelloID id](map<string|string[]> headers = {}) returns CustomField|error {
        string resourcePath = string `/customFields/${getEncodedUri(id)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Options of Custom Field drop down
    #
    # + id - ID of the customfield.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get customFields/[TrelloID id]/options(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/customFields/${getEncodedUri(id)}/options`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Option of Custom Field dropdown
    #
    # + id - ID of the customfielditem.
    # + idCustomFieldOption - ID of the customfieldoption to retrieve.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get customFields/[TrelloID id]/options/[TrelloID idCustomFieldOption](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/customFields/${getEncodedUri(id)}/options/${getEncodedUri(idCustomFieldOption)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # List available Emoji
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get emoji(map<string|string[]> headers = {}, *EmojiQueries queries) returns Emoji|error {
        string resourcePath = string `/emoji`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get an Enterprise
    #
    # + id - ID of the enterprise to retrieve.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get enterprises/[TrelloID id](map<string|string[]> headers = {}, *GetEnterprisesIdQueries queries) returns Enterprise|error {
        string resourcePath = string `/enterprises/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Enterprise admin Members
    #
    # + id - ID of the enterprise to retrieve.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get enterprises/[TrelloID id]/admins(map<string|string[]> headers = {}, *GetEnterprisesIdAdminsQueries queries) returns EnterpriseAdmin|error {
        string resourcePath = string `/enterprises/${getEncodedUri(id)}/admins`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get auditlog data for an Enterprise
    #
    # + id - ID of the enterprise to retrieve.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get enterprises/[TrelloID id]/auditlog(map<string|string[]> headers = {}) returns EnterpriseAuditLog[]|error {
        string resourcePath = string `/enterprises/${getEncodedUri(id)}/auditlog`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get ClaimableOrganizations of an Enterprise
    #
    # + id - ID of the enterprise to retrieve
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get enterprises/[TrelloID id]/claimableOrganizations(map<string|string[]> headers = {}, *GetEnterprisesIdClaimableorganizationsQueries queries) returns ClaimableOrganizations|error {
        string resourcePath = string `/enterprises/${getEncodedUri(id)}/claimableOrganizations`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Members of Enterprise
    #
    # + id - ID of the Enterprise to retrieve.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get enterprises/[TrelloID id]/members(map<string|string[]> headers = {}, *GetEnterprisesIdMembersQueries queries) returns Member[]|error {
        string resourcePath = string `/enterprises/${getEncodedUri(id)}/members`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Member of Enterprise
    #
    # + id - ID of the enterprise to retrieve.
    # + idMember - An ID of a member resource.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get enterprises/[TrelloID id]/members/[TrelloID idMember](map<string|string[]> headers = {}, *GetEnterprisesIdMembersIdmemberQueries queries) returns Member|error {
        string resourcePath = string `/enterprises/${getEncodedUri(id)}/members/${getEncodedUri(idMember)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Users of an Enterprise
    #
    # + id - ID of the enterprise to retrieve.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get enterprises/[TrelloID id]/members/query(map<string|string[]> headers = {}, *GetUsersIdQueries queries) returns Membership[]|error {
        string resourcePath = string `/enterprises/${getEncodedUri(id)}/members/query`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get PendingOrganizations of an Enterprise
    #
    # + id - ID of the enterprise to retrieve
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get enterprises/[TrelloID id]/pendingOrganizations(map<string|string[]> headers = {}, *GetEnterprisesIdPendingorganizationsQueries queries) returns PendingOrganizations[]|error {
        string resourcePath = string `/enterprises/${getEncodedUri(id)}/pendingOrganizations`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get signupUrl for Enterprise
    #
    # + id - ID of the enterprise to retrieve.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get enterprises/[TrelloID id]/signupUrl(map<string|string[]> headers = {}, *GetEnterprisesIdSignupurlQueries queries) returns inline_response_200_1|error {
        string resourcePath = string `/enterprises/${getEncodedUri(id)}/signupUrl`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get whether an organization can be transferred to an enterprise.
    #
    # + id - ID of the Enterprise to retrieve.
    # + idOrganization - An ID of an Organization resource.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get enterprises/[TrelloID id]/transferrable/organization/[TrelloID idOrganization](map<string|string[]> headers = {}) returns TransferrableOrganization|error {
        string resourcePath = string `/enterprises/${getEncodedUri(id)}/transferrable/organization/${getEncodedUri(idOrganization)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Label
    #
    # + id - The ID of the Label
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get labels/[TrelloID id](map<string|string[]> headers = {}, *GetLabelsIdQueries queries) returns error? {
        string resourcePath = string `/labels/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Cards in a List
    #
    # + id - The ID of the list
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get lists/[TrelloID id]/cards(map<string|string[]> headers = {}) returns Card[]|error {
        string resourcePath = string `/lists/${getEncodedUri(id)}/cards`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a List
    #
    # + id - The ID of the list
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get lists/[string id](map<string|string[]> headers = {}, *GetListsIdQueries queries) returns error? {
        string resourcePath = string `/lists/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Actions for a List
    #
    # + id - The ID of the list
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get lists/[string id]/actions(map<string|string[]> headers = {}, *GetListsIdActionsQueries queries) returns error? {
        string resourcePath = string `/lists/${getEncodedUri(id)}/actions`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the Board a List is on
    #
    # + id - The ID of the list
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get lists/[string id]/board(map<string|string[]> headers = {}, *GetListsIdBoardQueries queries) returns error? {
        string resourcePath = string `/lists/${getEncodedUri(id)}/board`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a field on a Member
    #
    # + id - The ID or username of the member
    # + 'field - One of the member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/[MemberFields 'field](map<string|string[]> headers = {}) returns inline_response_200_2|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/${getEncodedUri('field)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Member's Actions
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/actions(map<string|string[]> headers = {}, *GetMembersIdActionsQueries queries) returns Member[]|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/actions`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Member's custom Board backgrounds
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/boardBackgrounds(map<string|string[]> headers = {}, *GetMembersIdBoardbackgroundsQueries queries) returns BoardBackground[]|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/boardBackgrounds`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a boardBackground of a Member
    #
    # + id - The ID or username of the member
    # + idBackground - The ID of the board background
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/boardBackgrounds/[TrelloID idBackground](map<string|string[]> headers = {}, *GetMembersIdBoardbackgroundsIdbackgroundQueries queries) returns BoardBackground|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/boardBackgrounds/${getEncodedUri(idBackground)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Member's boardStars
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/boardStars(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/members/${getEncodedUri(id)}/boardStars`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a boardStar of Member
    #
    # + id - The ID or username of the member
    # + idStar - The ID of the board star
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/boardStars/[TrelloID idStar](map<string|string[]> headers = {}) returns BoardStars|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/boardStars/${getEncodedUri(idStar)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Boards that Member belongs to
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/boards(map<string|string[]> headers = {}, *GetMembersIdBoardsQueries queries) returns Board[]|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/boards`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Boards the Member has been invited to
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/boardsInvited(map<string|string[]> headers = {}, *GetMembersIdBoardsinvitedQueries queries) returns Board[]|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/boardsInvited`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Cards the Member is on
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/cards(map<string|string[]> headers = {}, *GetMembersIdCardsQueries queries) returns Card[]|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/cards`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Member's custom Board Backgrounds
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/customBoardBackgrounds(map<string|string[]> headers = {}) returns BoardBackground[]|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/customBoardBackgrounds`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Member's customEmojis
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/customEmoji(map<string|string[]> headers = {}) returns CustomEmoji[]|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/customEmoji`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Member's custom Emoji
    #
    # + id - The ID or username of the member
    # + idEmoji - The ID of the custom emoji
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/customEmoji/[TrelloID idEmoji](map<string|string[]> headers = {}, *MembersidcustomemojiidemojiQueries queries) returns CustomEmoji|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/customEmoji/${getEncodedUri(idEmoji)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Member's custom Stickers
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/customStickers(map<string|string[]> headers = {}) returns CustomSticker[]|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/customStickers`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Member's custom Sticker
    #
    # + id - The ID or username of the member
    # + idSticker - The ID of the uploaded sticker
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/customStickers/[TrelloID idSticker](map<string|string[]> headers = {}, *GetMembersIdCustomstickersIdstickerQueries queries) returns CustomSticker|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/customStickers/${getEncodedUri(idSticker)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Member's Notifications
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/notifications(map<string|string[]> headers = {}, *GetMembersIdNotificationsQueries queries) returns Notification[]|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/notifications`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Member's Organizations
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/organizations(map<string|string[]> headers = {}, *GetMembersIdOrganizationsQueries queries) returns Organization[]|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/organizations`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Organizations a Member has been invited to
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/organizationsInvited(map<string|string[]> headers = {}, *GetMembersIdOrganizationsinvitedQueries queries) returns Organization[]|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/organizationsInvited`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Member's saved searched
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/savedSearches(map<string|string[]> headers = {}) returns SavedSearch[]|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/savedSearches`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Member's Tokens
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get members/[TrelloID id]/tokens(map<string|string[]> headers = {}, *GetMembersIdTokensQueries queries) returns Token[]|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/tokens`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get custom Board Background of Member
    #
    # + id - The ID or username of the member
    # + idBackground - The ID of the custom background
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get members/[id_2 id]/customBoardBackgrounds/[TrelloID idBackground](map<string|string[]> headers = {}) returns BoardBackground|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/customBoardBackgrounds/${getEncodedUri(idBackground)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Member's notification channel settings
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get members/[id_3 id]/notificationsChannelSettings(map<string|string[]> headers = {}) returns NotificationChannelSettings[]|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/notificationsChannelSettings`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get blocked notification keys of Member on this channel
    #
    # + id - The ID or username of the member
    # + channel - Channel to block notifications on
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get members/[id_4 id]/notificationsChannelSettings/[Channel channel](map<string|string[]> headers = {}) returns NotificationChannelSettings|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/notificationsChannelSettings/${getEncodedUri(channel)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Member
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get members/[id id](map<string|string[]> headers = {}, *GetMembersIdQueries queries) returns inline_response_200_2|error {
        string resourcePath = string `/members/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a saved search
    #
    # + id - The ID or username of the member
    # + idSearch - The ID of the saved search to delete
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get members/[string id]/savedSearches/[string idSearch](map<string|string[]> headers = {}) returns SavedSearch|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/savedSearches/${getEncodedUri(idSearch)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Notification
    #
    # + id - The ID of the notification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get notifications/[TrelloID id](map<string|string[]> headers = {}, *GetNotificationsIdQueries queries) returns inline_response_200_3|error {
        string resourcePath = string `/notifications/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a field of a Notification
    #
    # + id - The ID of the notification
    # + 'field - A notification [field](/cloud/trello/guides/rest-api/object-definitions/)
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get notifications/[TrelloID id]/[NotificationFields 'field](map<string|string[]> headers = {}) returns inline_response_200_3|error {
        string resourcePath = string `/notifications/${getEncodedUri(id)}/${getEncodedUri('field)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the Board a Notification is on
    #
    # + id - The ID of the notification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get notifications/[TrelloID id]/board(map<string|string[]> headers = {}, *GetNotificationsIdBoardQueries queries) returns inline_response_200_4|error {
        string resourcePath = string `/notifications/${getEncodedUri(id)}/board`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the Card a Notification is on
    #
    # + id - The ID of the notification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get notifications/[TrelloID id]/card(map<string|string[]> headers = {}, *GetNotificationsIdCardQueries queries) returns inline_response_200_5|error {
        string resourcePath = string `/notifications/${getEncodedUri(id)}/card`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the List a Notification is on
    #
    # + id - The ID of the notification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get notifications/[TrelloID id]/list(map<string|string[]> headers = {}, *GetNotificationsIdListQueries queries) returns inline_response_200_6|error {
        string resourcePath = string `/notifications/${getEncodedUri(id)}/list`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the Member a Notification is about (not the creator)
    #
    # + id - The ID of the notification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get notifications/[TrelloID id]/member(map<string|string[]> headers = {}, *NotificationsidmemberQueries queries) returns inline_response_200_2|error {
        string resourcePath = string `/notifications/${getEncodedUri(id)}/member`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the Member who created the Notification
    #
    # + id - The ID of the notification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get notifications/[TrelloID id]/memberCreator(map<string|string[]> headers = {}, *GetNotificationsIdMembercreatorQueries queries) returns inline_response_200_2|error {
        string resourcePath = string `/notifications/${getEncodedUri(id)}/memberCreator`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Notification's associated Organization
    #
    # + id - The ID of the notification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get notifications/[TrelloID id]/organization(map<string|string[]> headers = {}, *GetNotificationsIdOrganizationQueries queries) returns inline_response_200_7|error {
        string resourcePath = string `/notifications/${getEncodedUri(id)}/organization`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get an Organization
    #
    # + id - The ID or name of the Organization
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get organizations/[TrelloID id](map<string|string[]> headers = {}) returns Organization|error {
        string resourcePath = string `/organizations/${getEncodedUri(id)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get field on Organization
    #
    # + id - The ID or name of the organization
    # + 'field - An organization [field](/cloud/trello/guides/rest-api/object-definitions/)
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get organizations/[TrelloID id]/[OrganizationFields 'field](map<string|string[]> headers = {}) returns Organization|error {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/${getEncodedUri('field)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Actions for Organization
    #
    # + id - The ID or name of the organization
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get organizations/[TrelloID id]/actions(map<string|string[]> headers = {}) returns Action[]|error {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/actions`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Boards in an Organization
    #
    # + id - The ID or name of the organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get organizations/[TrelloID id]/boards(map<string|string[]> headers = {}, *GetOrganizationsIdBoardsQueries queries) returns Board[]|error {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/boards`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieve Organization's Exports
    #
    # + id - The ID or name of the Workspace
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get organizations/[TrelloID id]/exports(map<string|string[]> headers = {}) returns Export[]|error {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/exports`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the Members of an Organization
    #
    # + id - The ID or name of the Organization
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get organizations/[TrelloID id]/members(map<string|string[]> headers = {}) returns Member[]|error {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/members`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Memberships of an Organization
    #
    # + id - The ID or name of the organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get organizations/[TrelloID id]/memberships(map<string|string[]> headers = {}, *GetOrganizationsIdMembershipsQueries queries) returns Memberships[]|error {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/memberships`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Membership of an Organization
    #
    # + id - The ID or name of the organization
    # + idMembership - The ID of the membership to load
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get organizations/[TrelloID id]/memberships/[TrelloID idMembership](map<string|string[]> headers = {}, *GetOrganizationsIdMembershipsIdmembershipQueries queries) returns inline_response_200_8|error {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/memberships/${getEncodedUri(idMembership)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Organizations new billable guests
    #
    # + id - The ID or name of the organization
    # + idBoard - The ID of the board to check for new billable guests.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get organizations/[TrelloID id]/newBillableGuests/[TrelloID idBoard](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/newBillableGuests/${getEncodedUri(idBoard)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the pluginData Scoped to Organization
    #
    # + id - The ID or name of the organization
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get organizations/[TrelloID id]/pluginData(map<string|string[]> headers = {}) returns PluginData[]|error {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/pluginData`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Tags of an Organization
    #
    # + id - The ID or name of the Organization
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get organizations/[id_6 id]/tags(map<string|string[]> headers = {}) returns Tag[]|error {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/tags`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get plugins/[TrelloID id](map<string|string[]> headers = {}) returns Plugin|error {
        string resourcePath = string `/plugins/${getEncodedUri(id)}/`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Plugin's Member privacy compliance
    #
    # + id - The ID of the Power-Up
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get plugins/[TrelloID id]/compliance/memberPrivacy(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/plugins/${getEncodedUri(id)}/compliance/memberPrivacy`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Search Trello
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get search(map<string|string[]> headers = {}, *GetSearchQueries queries) returns (Member|Card|Board|Organization)[]|error {
        string resourcePath = string `/search`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"idBoards": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get search/members(map<string|string[]> headers = {}, *GetSearchMembersQueries queries) returns Member[]|error {
        string resourcePath = string `/search/members/`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Token
    #
    # + token -
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get tokens/[string token](map<string|string[]> headers = {}, *GetTokensTokenQueries queries) returns Token|error {
        string resourcePath = string `/tokens/${getEncodedUri(token)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Token's Member
    #
    # + token -
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function get tokens/[string token]/member(map<string|string[]> headers = {}, *GetTokensTokenMemberQueries queries) returns Member|error {
        string resourcePath = string `/tokens/${getEncodedUri(token)}/member`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Webhooks for Token
    #
    # + token -
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get tokens/[string token]/webhooks(map<string|string[]> headers = {}) returns Webhook[]|error {
        string resourcePath = string `/tokens/${getEncodedUri(token)}/webhooks`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Webhook belonging to a Token
    #
    # + token -
    # + idWebhook - ID of the [Webhooks](ref:webhooks) to retrieve.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get tokens/[string token]/webhooks/[TrelloID idWebhook](map<string|string[]> headers = {}) returns Webhook|error {
        string resourcePath = string `/tokens/${getEncodedUri(token)}/webhooks/${getEncodedUri(idWebhook)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a Webhook
    #
    # + id - ID of the webhook to retrieve.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get webhooks/[TrelloID id](map<string|string[]> headers = {}) returns Webhook|error {
        string resourcePath = string `/webhooks/${getEncodedUri(id)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a field on a Webhook
    #
    # + id - ID of the webhook.
    # + 'field - Field to retrieve. One of: `active`, `callbackURL`, `description`, `idModel`
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function get webhooks/[TrelloID id]/["active"|"callbackURL"|"description"|"idModel"|"consecutiveFailures"|"firstConsecutiveFailDate" 'field](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/webhooks/${getEncodedUri(id)}/${getEncodedUri('field)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create Reaction for Action
    #
    # + idAction - The ID of the action
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function post actions/[TrelloID idAction]/reactions(idAction_reactions_body payload, map<string|string[]> headers = {}) returns inline_response_200|error {
        string resourcePath = string `/actions/${getEncodedUri(idAction)}/reactions`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post boards(map<string|string[]> headers = {}, *PostBoardsQueries queries) returns error? {
        string resourcePath = string `/boards/`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Enable a Power-Up on a Board
    #
    # + id - The ID of the Board
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    # 
    # # Deprecated
    @deprecated
    resource isolated function post boards/[TrelloID id]/boardPlugins(map<string|string[]> headers = {}, *PostBoardsIdBoardpluginsQueries queries) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/boardPlugins`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a calendarKey for a Board
    #
    # + id - The id of the board to update
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function post boards/[TrelloID id]/calendarKey/generate(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/calendarKey/generate`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a emailKey for a Board
    #
    # + id - The id of the board to update
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function post boards/[TrelloID id]/emailKey/generate(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/emailKey/generate`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a Tag for a Board
    #
    # + id - The id of the board to update
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post boards/[TrelloID id]/idTags(map<string|string[]> headers = {}, *PostBoardsIdIdtagsQueries queries) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/idTags`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a List on a Board
    #
    # + id - The ID of the board
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post boards/[TrelloID id]/lists(map<string|string[]> headers = {}, *PostBoardsIdListsQueries queries) returns TrelloList|error {
        string resourcePath = string `/boards/${getEncodedUri(id)}/lists`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Mark Board as viewed
    #
    # + id - The id of the board to update
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function post boards/[TrelloID id]/markedAsViewed(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/markedAsViewed`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a Label on a Board
    #
    # + id - The id of the board to update
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post boards/[string id]/labels(map<string|string[]> headers = {}, *PostBoardsIdLabelsQueries queries) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/labels`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a new Card
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post cards(map<string|string[]> headers = {}, *PostCardsQueries queries) returns Card|error {
        string resourcePath = string `/cards`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"pos": {style: FORM, explode: true}, "idMembers": {style: FORM, explode: true}, "idLabels": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add a new comment to a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post cards/[TrelloID id]/actions/comments(map<string|string[]> headers = {}, *PostCardsIdActionsCommentsQueries queries) returns Action|error {
        string resourcePath = string `/cards/${getEncodedUri(id)}/actions/comments`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create Attachment On Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post cards/[TrelloID id]/attachments(map<string|string[]> headers = {}, *PostCardsIdAttachmentsQueries queries) returns Attachment[]|error {
        string resourcePath = string `/cards/${getEncodedUri(id)}/attachments`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create Checklist on a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post cards/[TrelloID id]/checklists(map<string|string[]> headers = {}, *PostCardsIdChecklistsQueries queries) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/checklists`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add a Label to a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post cards/[TrelloID id]/idLabels(map<string|string[]> headers = {}, *PostCardsIdIdlabelsQueries queries) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/idLabels`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add a Member to a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post cards/[TrelloID id]/idMembers(map<string|string[]> headers = {}, *PostCardsIdIdmembersQueries queries) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/idMembers`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a new Label on a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post cards/[TrelloID id]/labels(map<string|string[]> headers = {}, *PostCardsIdLabelsQueries queries) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/labels`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Mark a Card's Notifications as read
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function post cards/[TrelloID id]/markAssociatedNotificationsRead(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/markAssociatedNotificationsRead`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add Member vote to Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post cards/[TrelloID id]/membersVoted(map<string|string[]> headers = {}, *Cardsidmembersvoted1Queries queries) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/membersVoted`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add a Sticker to a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post cards/[TrelloID id]/stickers(map<string|string[]> headers = {}, *PostCardsIdStickersQueries queries) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/stickers`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a Checklist
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post checklists(map<string|string[]> headers = {}, *PostChecklistsQueries queries) returns error? {
        string resourcePath = string `/checklists`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"pos": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create Checkitem on Checklist
    #
    # + id - ID of a checklist.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post checklists/[TrelloID id]/checkItems(map<string|string[]> headers = {}, *PostChecklistsIdCheckitemsQueries queries) returns error? {
        string resourcePath = string `/checklists/${getEncodedUri(id)}/checkItems`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"pos": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a new Custom Field on a Board
    #
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function post customFields(customFields_body payload, map<string|string[]> headers = {}) returns CustomField|error {
        string resourcePath = string `/customFields`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add Option to Custom Field dropdown
    #
    # + id - ID of the customfield.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function post customFields/[TrelloID id]/options(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/customFields/${getEncodedUri(id)}/options`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create an auth Token for an Enterprise.
    #
    # + id - ID of the enterprise to retrieve.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post enterprises/[string id]/tokens(map<string|string[]> headers = {}, *PostEnterprisesIdTokensQueries queries) returns error? {
        string resourcePath = string `/enterprises/${getEncodedUri(id)}/tokens`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a Label
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post labels(map<string|string[]> headers = {}, *PostLabelsQueries queries) returns error? {
        string resourcePath = string `/labels`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a new List
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post lists(map<string|string[]> headers = {}, *PostListsQueries queries) returns error? {
        string resourcePath = string `/lists`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"pos": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Archive all Cards in List
    #
    # + id - The ID of the list
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function post lists/[TrelloID id]/archiveAllCards(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/lists/${getEncodedUri(id)}/archiveAllCards`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Move all Cards in List
    #
    # + id - The ID of the list
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post lists/[TrelloID id]/moveAllCards(map<string|string[]> headers = {}, *PostListsIdMoveallcardsQueries queries) returns error? {
        string resourcePath = string `/lists/${getEncodedUri(id)}/moveAllCards`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Upload new boardBackground for Member
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post members/[TrelloID id]/boardBackgrounds(map<string|string[]> headers = {}, *PostMembersIdBoardbackgrounds1Queries queries) returns BoardBackground[]|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/boardBackgrounds`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a new custom Board Background
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post members/[TrelloID id]/customBoardBackgrounds(map<string|string[]> headers = {}, *Membersidcustomboardbackgrounds1Queries queries) returns BoardBackground|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/customBoardBackgrounds`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create custom Emoji for Member
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post members/[TrelloID id]/customEmoji(map<string|string[]> headers = {}, *PostMembersIdCustomemojiQueries queries) returns CustomEmoji|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/customEmoji`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create custom Sticker for Member
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post members/[TrelloID id]/customStickers(map<string|string[]> headers = {}, *PostMembersIdCustomstickersQueries queries) returns CustomSticker|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/customStickers`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Dismiss a message for Member
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post members/[TrelloID id]/oneTimeMessagesDismissed(map<string|string[]> headers = {}, *PostMembersIdOnetimemessagesdismissedQueries queries) returns error? {
        string resourcePath = string `/members/${getEncodedUri(id)}/oneTimeMessagesDismissed`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create saved Search for Member
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post members/[TrelloID id]/savedSearches(map<string|string[]> headers = {}, *PostMembersIdSavedsearchesQueries queries) returns SavedSearch|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/savedSearches`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"pos": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create Star for Board
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post members/[id_1 id]/boardStars(map<string|string[]> headers = {}, *PostMembersIdBoardstarsQueries queries) returns BoardStars[]|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/boardStars`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"pos": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create Avatar for Member
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post members/[string id]/avatar(map<string|string[]> headers = {}, *MembersidavatarQueries queries) returns error? {
        string resourcePath = string `/members/${getEncodedUri(id)}/avatar`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Mark all Notifications as read
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post notifications/all/read(map<string|string[]> headers = {}, *PostNotificationsAllReadQueries queries) returns inline_response_200_3|error {
        string resourcePath = string `/notifications/all/read`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"ids": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a new Organization
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post organizations(map<string|string[]> headers = {}, *PostOrganizationsQueries queries) returns inline_response_200_7|error {
        string resourcePath = string `/organizations`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create Export for Organizations
    #
    # + id - The ID or name of the Workspace
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post organizations/[TrelloID id]/exports(map<string|string[]> headers = {}, *PostOrganizationsIdExportsQueries queries) returns Export|error {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/exports`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Update logo for an Organization
    #
    # + id - The ID or name of the Workspace
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post organizations/[TrelloID id]/logo(map<string|string[]> headers = {}, *PostOrganizationsIdLogoQueries queries) returns inline_response_200_7|error {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/logo`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a Tag in Organization
    #
    # + id - The ID or name of the Organization
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function post organizations/[id_6 id]/tags(map<string|string[]> headers = {}) returns inline_response_200_9|error {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/tags`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a Listing for Plugin
    #
    # + idPlugin - The ID of the Power-Up for which you are creating a new listing.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function post plugins/[TrelloID idPlugin]/listing(idPlugin_listing_body payload, map<string|string[]> headers = {}) returns PluginListing|error {
        string resourcePath = string `/plugins/${getEncodedUri(idPlugin)}/listing`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create Webhooks for Token
    #
    # + token -
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function post tokens/[string token]/webhooks(map<string|string[]> headers = {}, *PostTokensTokenWebhooksQueries queries) returns Webhook|error {
        string resourcePath = string `/tokens/${getEncodedUri(token)}/webhooks`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post webhooks(map<string|string[]> headers = {}, *PostWebhooksQueries queries) returns Webhook|error {
        string resourcePath = string `/webhooks/`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Update an Action
    #
    # + id - The ID of the Action
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put actions/[TrelloID id](map<string|string[]> headers = {}, *PutActionsIdQueries queries) returns error? {
        string resourcePath = string `/actions/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a Comment Action
    #
    # + id - The ID of the action to update
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put actions/[TrelloID id]/text(map<string|string[]> headers = {}, *PutActionsIdTextQueries queries) returns error? {
        string resourcePath = string `/actions/${getEncodedUri(id)}/text`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a Board
    #
    # + id -
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put boards/[TrelloID id](map<string|string[]> headers = {}, *PutBoardsIdQueries queries) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Invite Member to Board via email
    #
    # + id - The ID of the board
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put boards/[TrelloID id]/members(id_members_body payload, map<string|string[]> headers = {}, *PutBoardsIdMembersQueries queries) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/members`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Add a Member to a Board
    #
    # + id - The id of the board to update
    # + idMember - The id of the member to add to the board.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put boards/[TrelloID id]/members/[TrelloID idMember](map<string|string[]> headers = {}, *PutBoardsIdMembersIdmemberQueries queries) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/members/${getEncodedUri(idMember)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update Membership of Member on a Board
    #
    # + id - The id of the board to update
    # + idMembership - The id of a membership that should be added to this board.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put boards/[TrelloID id]/memberships/[TrelloID idMembership](map<string|string[]> headers = {}, *PutBoardsIdMembershipsIdmembershipQueries queries) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/memberships/${getEncodedUri(idMembership)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update emailPosition Pref on a Board
    #
    # + id - The id of the board to update
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put boards/[TrelloID id]/myPrefs/emailPosition(map<string|string[]> headers = {}, *PutBoardsIdMyprefsEmailpositionQueries queries) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/myPrefs/emailPosition`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update idEmailList Pref on a Board
    #
    # + id - The id of the board to update
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put boards/[TrelloID id]/myPrefs/idEmailList(map<string|string[]> headers = {}, *PutBoardsIdMyprefsIdemaillistQueries queries) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/myPrefs/idEmailList`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update showSidebar Pref on a Board
    #
    # + id - The id of the board to update
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put boards/[TrelloID id]/myPrefs/showSidebar(map<string|string[]> headers = {}, *PutBoardsIdMyprefsShowsidebarQueries queries) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/myPrefs/showSidebar`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update showSidebarActivity Pref on a Board
    #
    # + id - The id of the board to update
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put boards/[TrelloID id]/myPrefs/showSidebarActivity(map<string|string[]> headers = {}, *PutBoardsIdMyprefsShowsidebaractivityQueries queries) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/myPrefs/showSidebarActivity`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update showSidebarBoardActions Pref on a Board
    #
    # + id - The id of the board to update
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put boards/[TrelloID id]/myPrefs/showSidebarBoardActions(map<string|string[]> headers = {}, *PutBoardsIdMyprefsShowsidebarboardactionsQueries queries) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/myPrefs/showSidebarBoardActions`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update showSidebarMembers Pref on a Board
    #
    # + id - The id of the board to update
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put boards/[TrelloID id]/myPrefs/showSidebarMembers(map<string|string[]> headers = {}, *PutBoardsIdMyprefsShowsidebarmembersQueries queries) returns error? {
        string resourcePath = string `/boards/${getEncodedUri(id)}/myPrefs/showSidebarMembers`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update Checkitem on Checklist on Card
    #
    # + idCard - The ID of the Card
    # + idCheckItem - The ID of the checklist item to update
    # + idChecklist - The ID of the item to update.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put cards/[TrelloID idCard]/checklist/[TrelloID idChecklist]/checkItem/[TrelloID idCheckItem](map<string|string[]> headers = {}, *PutCardsIdcardChecklistIdchecklistCheckitemIdcheckitemQueries queries) returns CheckItem|error {
        string resourcePath = string `/cards/${getEncodedUri(idCard)}/checklist/${getEncodedUri(idChecklist)}/checkItem/${getEncodedUri(idCheckItem)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"pos": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update Custom Field item on Card
    #
    # + idCard - ID of the card that the Custom Field value should be set/updated for
    # + idCustomField - ID of the Custom Field on the card.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function put cards/[TrelloID idCard]/customField/[TrelloID idCustomField]/item(idCustomField_item_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(idCard)}/customField/${getEncodedUri(idCustomField)}/item`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update Multiple Custom Field items on Card
    #
    # + idCard - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function put cards/[TrelloID idCard]/customFields(idCard_customFields_body payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(idCard)}/customFields`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a Card
    #
    # + id - The ID of the Card
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put cards/[TrelloID id](map<string|string[]> headers = {}, *PutCardsIdQueries queries) returns Card|error {
        string resourcePath = string `/cards/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"pos": {style: FORM, explode: true}, "cover": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update Comment Action on a Card
    #
    # + id - The ID of the Card
    # + idAction - The ID of the comment action to update
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put cards/[TrelloID id]/actions/[TrelloID idAction]/comments(map<string|string[]> headers = {}, *PutCardsIdActionsIdactionCommentsQueries queries) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/actions/${getEncodedUri(idAction)}/comments`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a checkItem on a Card
    #
    # + id - The ID of the Card
    # + idCheckItem - The ID of the checkitem
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put cards/[TrelloID id]/checkItem/[TrelloID idCheckItem](map<string|string[]> headers = {}, *PutCardsIdCheckitemIdcheckitemQueries queries) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/checkItem/${getEncodedUri(idCheckItem)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"pos": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a Sticker on a Card
    #
    # + id - The ID of the Card
    # + idSticker - The ID of the sticker
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put cards/[TrelloID id]/stickers/[TrelloID idSticker](map<string|string[]> headers = {}, *PutCardsIdStickersIdstickerQueries queries) returns error? {
        string resourcePath = string `/cards/${getEncodedUri(id)}/stickers/${getEncodedUri(idSticker)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a Checklist
    #
    # + id - ID of a checklist.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put checklists/[TrelloID id](map<string|string[]> headers = {}, *PutCheclistsIdQueries queries) returns error? {
        string resourcePath = string `/checklists/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"pos": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update field on a Checklist
    #
    # + id - ID of a checklist.
    # + 'field - Field to update.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put checklists/[TrelloID id]/["name"|"pos" 'field](map<string|string[]> headers = {}, *PutChecklistsIdFieldQueries queries) returns error? {
        string resourcePath = string `/checklists/${getEncodedUri(id)}/${getEncodedUri('field)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"value": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a Custom Field definition
    #
    # + id - ID of the Custom Field.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function put customFields/[TrelloID id](customFields_id_body payload, map<string|string[]> headers = {}) returns CustomField|error {
        string resourcePath = string `/customFields/${getEncodedUri(id)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update Member to be admin of Enterprise
    #
    # + id - ID of the enterprise to retrieve.
    # + idMember - ID of member to be made an admin of enterprise.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function put enterprises/[TrelloID id]/admins/[TrelloID idMember](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/enterprises/${getEncodedUri(id)}/admins/${getEncodedUri(idMember)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    resource isolated function put enterprises/[TrelloID id]/enterpriseJoinRequest/bulk(map<string|string[]> headers = {}, *PutEnterprisesIdEnterprisejoinrequestBulkQueries queries) returns http:Response|error {
        string resourcePath = string `/enterprises/$${getEncodedUri(id)}/enterpriseJoinRequest/bulk`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"idOrganizations": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Deactivate a Member of an Enterprise.
    #
    # + id - ID of the enterprise to retrieve.
    # + idMember - ID of the Member to deactive.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put enterprises/[TrelloID id]/members/[TrelloID idMember]/deactivated(map<string|string[]> headers = {}, *EnterprisesIdMembersIdmemberDeactivatedQueries queries) returns error? {
        string resourcePath = string `/enterprises/${getEncodedUri(id)}/members/${getEncodedUri(idMember)}/deactivated`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a Member's licensed status
    #
    # + id - ID of the Enterprise.
    # + idMember - The ID of the Member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put enterprises/[TrelloID id]/members/[TrelloID idMember]/licensed(map<string|string[]> headers = {}, *PutEnterprisesIdMembersIdmemberLicensedQueries queries) returns Member|error {
        string resourcePath = string `/enterprises/${getEncodedUri(id)}/members/${getEncodedUri(idMember)}/licensed`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Transfer an Organization to an Enterprise.
    #
    # + id - ID of the Enterprise to retrieve.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put enterprises/[TrelloID id]/organizations(map<string|string[]> headers = {}, *PutEnterprisesIdOrganizationsQueries queries) returns Organization[]|error {
        string resourcePath = string `/enterprises/${getEncodedUri(id)}/organizations`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a Label
    #
    # + id - The ID of the Label
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put labels/[TrelloID id](map<string|string[]> headers = {}, *PutLabelsIdQueries queries) returns error? {
        string resourcePath = string `/labels/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a field on a label
    #
    # + id - The id of the label
    # + 'field - The field on the Label to update.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put labels/[string id]/["color"|"name" 'field](map<string|string[]> headers = {}, *PutLabelsIdFieldQueries queries) returns error? {
        string resourcePath = string `/labels/${getEncodedUri(id)}/${getEncodedUri('field)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a field on a List
    #
    # + id - The ID of the list
    # + 'field - The field on the List to be updated
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put lists/[TrelloID id]/["name"|"pos"|"subscribed" 'field](map<string|string[]> headers = {}, *PutListsIdFieldQueries queries) returns error? {
        string resourcePath = string `/lists/${getEncodedUri(id)}/${getEncodedUri('field)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"value": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Archive or unarchive a list
    #
    # + id - The ID of the list
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put lists/[TrelloID id]/closed(map<string|string[]> headers = {}, *PutListsIdClosedQueries queries) returns error? {
        string resourcePath = string `/lists/${getEncodedUri(id)}/closed`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Move List to Board
    #
    # + id - The ID of the list
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put lists/[TrelloID id]/idBoard(map<string|string[]> headers = {}, *PutIdIdboardQueries queries) returns error? {
        string resourcePath = string `/lists/${getEncodedUri(id)}/idBoard`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a List
    #
    # + id - The ID of the list
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put lists/[string id](map<string|string[]> headers = {}, *PutListsIdQueries queries) returns error? {
        string resourcePath = string `/lists/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"pos": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a Member
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put members/[TrelloID id](map<string|string[]> headers = {}, *PutMembersIdQueries queries) returns inline_response_200_2|error {
        string resourcePath = string `/members/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a Member's custom Board background
    #
    # + id - The ID or username of the member
    # + idBackground - The ID of the board background
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put members/[TrelloID id]/boardBackgrounds/[TrelloID idBackground](map<string|string[]> headers = {}, *PutMembersIdBoardbackgroundsIdbackgroundQueries queries) returns BoardBackground|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/boardBackgrounds/${getEncodedUri(idBackground)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update the position of a boardStar of Member
    #
    # + id - The ID or username of the member
    # + idStar - The ID of the board star
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put members/[TrelloID id]/boardStars/[TrelloID idStar](map<string|string[]> headers = {}, *PutMembersIdBoardstarsIdstarQueries queries) returns error? {
        string resourcePath = string `/members/${getEncodedUri(id)}/boardStars/${getEncodedUri(idStar)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        map<Encoding> queryParamEncoding = {"pos": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update custom Board Background of Member
    #
    # + id - The ID or username of the member
    # + idBackground - The ID of the custom background
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put members/[id_2 id]/customBoardBackgrounds/[TrelloID idBackground](map<string|string[]> headers = {}, *PutMembersIdCustomboardbackgroundsIdbackgroundQueries queries) returns BoardBackground|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/customBoardBackgrounds/${getEncodedUri(idBackground)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update blocked notification keys of Member on a channel
    #
    # + id - The ID or username of the member
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function put members/[id_3 id]/notificationsChannelSettings(id_notificationsChannelSettings_body payload, map<string|string[]> headers = {}) returns NotificationChannelSettings|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/notificationsChannelSettings`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update blocked notification keys of Member on a channel
    #
    # + id - The ID or username of the member
    # + channel - Channel to block notifications on
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function put members/[id_4 id]/notificationsChannelSettings/[Channel channel](notificationsChannelSettings_channel_body payload, map<string|string[]> headers = {}) returns NotificationChannelSettings|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/notificationsChannelSettings/${getEncodedUri(channel)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update blocked notification keys of Member on a channel
    #
    # + id - The ID or username of the member
    # + channel - Channel to block notifications on
    # + blockedKeys - Singular key or comma-separated list of notification keys
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function put members/[id_5 id]/notificationsChannelSettings/[Channel channel]/[BlockedKey blockedKeys](map<string|string[]> headers = {}) returns NotificationChannelSettings|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/notificationsChannelSettings/${getEncodedUri(channel)}/${getEncodedUri(blockedKeys)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a saved search
    #
    # + id - The ID or username of the member
    # + idSearch - The ID of the saved search to delete
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put members/[string id]/savedSearches/[string idSearch](map<string|string[]> headers = {}, *PutMembersIdSavedsearchesIdsearchQueries queries) returns SavedSearch|error {
        string resourcePath = string `/members/${getEncodedUri(id)}/savedSearches/${getEncodedUri(idSearch)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a Notification's read status
    #
    # + id - The ID of the notification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put notifications/[TrelloID id](map<string|string[]> headers = {}, *PutNotificationsIdQueries queries) returns inline_response_200_3|error {
        string resourcePath = string `/notifications/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update Notification's read status
    #
    # + id - The ID of the notification
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put notifications/[TrelloID id]/unread(map<string|string[]> headers = {}, *PutNotificationsIdUnreadQueries queries) returns inline_response_200_3|error {
        string resourcePath = string `/notifications/${getEncodedUri(id)}/unread`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update an Organization
    #
    # + id - The ID or name of the Organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put organizations/[TrelloID id](map<string|string[]> headers = {}, *PutOrganizationsIdQueries queries) returns Organization|error {
        string resourcePath = string `/organizations/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update an Organization's Members
    #
    # + id - The ID or name of the organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put organizations/[TrelloID id]/members(map<string|string[]> headers = {}, *PutOrganizationsIdMembersQueries queries) returns error? {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/members`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Deactivate or reactivate a member of an Organization
    #
    # + id - The ID or name of the organization
    # + idMember - The ID or username of the member to update
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put organizations/[TrelloID id]/members/[idMember_1 idMember]/deactivated(map<string|string[]> headers = {}, *PutOrganizationsIdMembersIdmemberDeactivatedQueries queries) returns error? {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/members/${getEncodedUri(idMember)}/deactivated`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a Member of an Organization
    #
    # + id - The ID or name of the organization
    # + idMember - The ID or username of the member to update
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put organizations/[TrelloID id]/members/[idMember idMember](map<string|string[]> headers = {}, *PutOrganizationsIdMembersIdmemberQueries queries) returns inline_response_200_2|error {
        string resourcePath = string `/organizations/${getEncodedUri(id)}/members/${getEncodedUri(idMember)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updating Plugin's Listing
    #
    # + idPlugin - The ID of the Power-Up whose listing is being updated.
    # + idListing - The ID of the existing listing for the Power-Up that is being updated.
    # + headers - Headers to be sent with the request 
    # + return - Success 
    resource isolated function put plugins/[TrelloID idPlugin]/listings/[TrelloID idListing](listings_idListing_body payload, map<string|string[]> headers = {}) returns PluginListing|error {
        string resourcePath = string `/plugins/${getEncodedUri(idPlugin)}/listings/${getEncodedUri(idListing)}`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    resource isolated function put plugins/[TrelloID id](map<string|string[]> headers = {}) returns Plugin|error {
        string resourcePath = string `/plugins/${getEncodedUri(id)}/`;
        map<anydata> queryParam = {};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a Webhook created by Token
    #
    # + token -
    # + idWebhook - ID of the [Webhooks](ref:webhooks) to retrieve.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put tokens/[string token]/webhooks/[TrelloID idWebhook](map<string|string[]> headers = {}, *Tokenstokenwebhooks1Queries queries) returns error? {
        string resourcePath = string `/tokens/${getEncodedUri(token)}/webhooks/${getEncodedUri(idWebhook)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a Webhook
    #
    # + id - ID of the webhook to retrieve.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    resource isolated function put webhooks/[TrelloID id](map<string|string[]> headers = {}, *PutWebhooksIdQueries queries) returns Webhook|error {
        string resourcePath = string `/webhooks/${getEncodedUri(id)}`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        queryParam["token"] = self.apiKeyConfig.token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }
}
